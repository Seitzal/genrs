[info] Loading settings for project genrs-build from plugins.sbt ...
[info] Loading project definition from /d/Code/genrs/project
[info] Loading settings for project genrs from build.sbt ...
[info] Set current project to genrs (in build file:/d/Code/genrs/)
[info] Compiling 1 Scala source to /d/Code/genrs/target/scala-0.22/test-classes ...
exception while typing x.isInstanceOf[[35mgenrs.ResourceWrapper[String][0m] of class class dotty.tools.dotc.ast.Trees$TypeApply # 11896
exception while typing {
  x.isInstanceOf[[35mgenrs.ResourceWrapper[String][0m]
} of class class dotty.tools.dotc.ast.Trees$Inlined # 11897
exception while typing org.scalactic.Bool.isInstanceOfMacroBool(
  {
    x
  }
, [32m"isInstanceOf"[0m, 
  {
    [32m"genrs.ResourceWrapper[scala.Predef.String]"[0m
  }
, 
  {
    x.isInstanceOf[[35mgenrs.ResourceWrapper[String][0m]
  }
, 
  {
    {
      org.scalactic.Prettifier.default
    }
  }
) of class class dotty.tools.dotc.ast.Trees$Apply # 11898
exception while typing {
  org.scalactic.Bool.isInstanceOfMacroBool(
    {
      x
    }
  , [32m"isInstanceOf"[0m, 
    {
      [32m"genrs.ResourceWrapper[scala.Predef.String]"[0m
    }
  , 
    {
      x.isInstanceOf[[35mgenrs.ResourceWrapper[String][0m]
    }
  , 
    {
      {
        org.scalactic.Prettifier.default
      }
    }
  )
} of class class dotty.tools.dotc.ast.Trees$Inlined # 17753
exception while typing {
  {
    org.scalactic.Bool.isInstanceOfMacroBool(
      {
        x
      }
    , [32m"isInstanceOf"[0m, 
      {
        [32m"genrs.ResourceWrapper[scala.Predef.String]"[0m
      }
    , 
      {
        x.isInstanceOf[[35mgenrs.ResourceWrapper[String][0m]
      }
    , 
      {
        {
          org.scalactic.Prettifier.default
        }
      }
    )
  }
} of class class dotty.tools.dotc.ast.Trees$Inlined # 17754
exception while typing {
  [33mval[0m [36mx[0m: [35m(name : genrs.ResourceWrapper)[0m = 
    {
      name
    }
  {
    {
      org.scalactic.Bool.isInstanceOfMacroBool(
        {
          x
        }
      , [32m"isInstanceOf"[0m, 
        {
          [32m"genrs.ResourceWrapper[scala.Predef.String]"[0m
        }
      , 
        {
          x.isInstanceOf[[35mgenrs.ResourceWrapper[String][0m]
        }
      , 
        {
          {
            org.scalactic.Prettifier.default
          }
        }
      )
    }
  }
} of class class dotty.tools.dotc.ast.Trees$Block # 17755
exception while typing {
  {
    [33mval[0m [36mx[0m: [35m(name : genrs.ResourceWrapper)[0m = 
      {
        name
      }
    {
      {
        org.scalactic.Bool.isInstanceOfMacroBool(
          {
            x
          }
        , [32m"isInstanceOf"[0m, 
          {
            [32m"genrs.ResourceWrapper[scala.Predef.String]"[0m
          }
        , 
          {
            x.isInstanceOf[[35mgenrs.ResourceWrapper[String][0m]
          }
        , 
          {
            {
              org.scalactic.Prettifier.default
            }
          }
        )
      }
    }
  }
} of class class dotty.tools.dotc.ast.Trees$Inlined # 22540
exception while typing {
  {
    {
      [33mval[0m [36mx[0m: [35m(name : genrs.ResourceWrapper)[0m = 
        {
          name
        }
      {
        {
          org.scalactic.Bool.isInstanceOfMacroBool(
            {
              x
            }
          , [32m"isInstanceOf"[0m, 
            {
              [32m"genrs.ResourceWrapper[scala.Predef.String]"[0m
            }
          , 
            {
              x.isInstanceOf[[35mgenrs.ResourceWrapper[String][0m]
            }
          , 
            {
              {
                org.scalactic.Prettifier.default
              }
            }
          )
        }
      }
    }
  }
} of class class dotty.tools.dotc.ast.Trees$Inlined # 22541
exception while typing {
  {
    {
      [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
        [36mpos[0m: [35morg.scalactic.source.Position[0m
      ): [35morg.scalatest.compatible.Assertion[0m = 
        org.scalatest.Assertions.assertionsHelper.macroAssert(bool, clue, pos)
      closure($anonfun)
    }
  }
}.apply(
  {
    {
      {
        [33mval[0m [36mx[0m: [35m(name : genrs.ResourceWrapper)[0m = 
          {
            name
          }
        {
          {
            org.scalactic.Bool.isInstanceOfMacroBool(
              {
                x
              }
            , [32m"isInstanceOf"[0m, 
              {
                [32m"genrs.ResourceWrapper[scala.Predef.String]"[0m
              }
            , 
              {
                x.isInstanceOf[[35mgenrs.ResourceWrapper[String][0m]
              }
            , 
              {
                {
                  org.scalactic.Prettifier.default
                }
              }
            )
          }
        }
      }
    }
  }
, 
  {
    {
      [32m""[0m
    }
  }
, 
  {
    {
      pos
    }
  }
) of class class dotty.tools.dotc.ast.Trees$Apply # 22542
exception while typing {
  {
    {
      {
        [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
          [36mpos[0m: [35morg.scalactic.source.Position[0m
        ): [35morg.scalatest.compatible.Assertion[0m = 
          org.scalatest.Assertions.assertionsHelper.macroAssert(bool, clue, pos)
        closure($anonfun)
      }
    }
  }.apply(
    {
      {
        {
          [33mval[0m [36mx[0m: [35m(name : genrs.ResourceWrapper)[0m = 
            {
              name
            }
          {
            {
              org.scalactic.Bool.isInstanceOfMacroBool(
                {
                  x
                }
              , [32m"isInstanceOf"[0m, 
                {
                  [32m"genrs.ResourceWrapper[scala.Predef.String]"[0m
                }
              , 
                {
                  x.isInstanceOf[[35mgenrs.ResourceWrapper[String][0m]
                }
              , 
                {
                  {
                    org.scalactic.Prettifier.default
                  }
                }
              )
            }
          }
        }
      }
    }
  , 
    {
      {
        [32m""[0m
      }
    }
  , 
    {
      {
        pos
      }
    }
  )
} of class class dotty.tools.dotc.ast.Trees$Inlined # 22544
exception while typing {
  {
    {
      {
        [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
          [36mpos[0m: [35morg.scalactic.source.Position[0m
        ): [35morg.scalatest.compatible.Assertion[0m = 
          org.scalatest.Assertions.assertionsHelper.macroAssert(bool, clue, pos)
        closure($anonfun)
      }
    }
  }.apply(
    {
      {
        {
          [33mval[0m [36mx[0m: [35m(name : genrs.ResourceWrapper)[0m = 
            {
              name
            }
          {
            {
              org.scalactic.Bool.isInstanceOfMacroBool(
                {
                  x
                }
              , [32m"isInstanceOf"[0m, 
                {
                  [32m"genrs.ResourceWrapper[scala.Predef.String]"[0m
                }
              , 
                {
                  x.isInstanceOf[[35mgenrs.ResourceWrapper[String][0m]
                }
              , 
                {
                  {
                    org.scalactic.Prettifier.default
                  }
                }
              )
            }
          }
        }
      }
    }
  , 
    {
      {
        [32m""[0m
      }
    }
  , 
    {
      {
        pos
      }
    }
  )
}:[35morg.scalatest.compatible.Assertion[0m of class class dotty.tools.dotc.ast.Trees$Typed # 15264
exception while typing {
  [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
    {
      {
        org.scalactic.source.Position.apply(
          {
            [32m"ResourceSpec.scala"[0m
          }
        , 
          {
            [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
          }
        , 
          {
            [31m87[0m
          }
        )
      }:[35morg.scalactic.source.Position[0m
    }
  {
    {
      {
        {
          [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
            [36mpos[0m: [35morg.scalactic.source.Position[0m
          ): [35morg.scalatest.compatible.Assertion[0m = 
            org.scalatest.Assertions.assertionsHelper.macroAssert(bool, clue, 
              pos
            )
          closure($anonfun)
        }
      }
    }.apply(
      {
        {
          {
            [33mval[0m [36mx[0m: [35m(name : genrs.ResourceWrapper)[0m = 
              {
                name
              }
            {
              {
                org.scalactic.Bool.isInstanceOfMacroBool(
                  {
                    x
                  }
                , [32m"isInstanceOf"[0m, 
                  {
                    [32m"genrs.ResourceWrapper[scala.Predef.String]"[0m
                  }
                , 
                  {
                    x.isInstanceOf[[35mgenrs.ResourceWrapper[String][0m]
                  }
                , 
                  {
                    {
                      org.scalactic.Prettifier.default
                    }
                  }
                )
              }
            }
          }
        }
      }
    , 
      {
        {
          [32m""[0m
        }
      }
    , 
      {
        {
          pos
        }
      }
    )
  }:[35morg.scalatest.compatible.Assertion[0m
} of class class dotty.tools.dotc.ast.Trees$Inlined # 21725
exception while typing {
  [33mval[0m [36mname[0m: [35mgenrs.ResourceWrapper[?][0m = [33mthis[0m.kvObject0.kv.apply([32m"name"[0m)
  {
    [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
      {
        {
          org.scalactic.source.Position.apply(
            {
              [32m"ResourceSpec.scala"[0m
            }
          , 
            {
              [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
            }
          , 
            {
              [31m86[0m
            }
          )
        }:[35morg.scalactic.source.Position[0m
      }
    {
      {
        {
          {
            [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
              [36mpos[0m: [35morg.scalactic.source.Position[0m
            ): [35morg.scalatest.compatible.Assertion[0m = 
              org.scalatest.Assertions.assertionsHelper.macroAssert(bool, clue, 
                pos
              )
            closure($anonfun)
          }
        }
      }.apply(
        {
          {
            {
              [33mval[0m [36mx[0m: [35m(name.rtype : (): String)[0m = 
                {
                  name.rtype
                }
              {
                {
                  {
                    [33mval[0m [36mx[0m: [35m([32m"string"[0m : String)[0m = 
                      {
                        [32m"string"[0m
                      }
                    {
                      {
                        {
                          [33mval[0m [36mx[0m: [35mBoolean[0m = 
                            {
                              x.==(x)
                            }
                          {
                            {
                              org.scalactic.Bool.binaryMacroBool(
                                {
                                  x
                                }
                              , 
                                {
                                  [32m"=="[0m
                                }
                              , 
                                {
                                  x
                                }
                              , 
                                {
                                  x
                                }
                              , 
                                {
                                  {
                                    org.scalactic.Prettifier.default
                                  }
                                }
                              )
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      , 
        {
          {
            [32m""[0m
          }
        }
      , 
        {
          {
            pos
          }
        }
      )
    }:[35morg.scalatest.compatible.Assertion[0m
  }
  {
    [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
      {
        {
          org.scalactic.source.Position.apply(
            {
              [32m"ResourceSpec.scala"[0m
            }
          , 
            {
              [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
            }
          , 
            {
              [31m87[0m
            }
          )
        }:[35morg.scalactic.source.Position[0m
      }
    {
      {
        {
          {
            [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
              [36mpos[0m: [35morg.scalactic.source.Position[0m
            ): [35morg.scalatest.compatible.Assertion[0m = 
              org.scalatest.Assertions.assertionsHelper.macroAssert(bool, clue, 
                pos
              )
            closure($anonfun)
          }
        }
      }.apply(
        {
          {
            {
              [33mval[0m [36mx[0m: [35m(name : genrs.ResourceWrapper)[0m = 
                {
                  name
                }
              {
                {
                  org.scalactic.Bool.isInstanceOfMacroBool(
                    {
                      x
                    }
                  , [32m"isInstanceOf"[0m, 
                    {
                      [32m"genrs.ResourceWrapper[scala.Predef.String]"[0m
                    }
                  , 
                    {
                      x.isInstanceOf[[35mgenrs.ResourceWrapper[String][0m]
                    }
                  , 
                    {
                      {
                        org.scalactic.Prettifier.default
                      }
                    }
                  )
                }
              }
            }
          }
        }
      , 
        {
          {
            [32m""[0m
          }
        }
      , 
        {
          {
            pos
          }
        }
      )
    }:[35morg.scalatest.compatible.Assertion[0m
  }
} of class class dotty.tools.dotc.ast.Trees$Block # 21726
exception while typing [33mdef[0m [36m$anonfun[0m(): [35morg.scalatest.compatible.Assertion[0m = 
  {
    [33mval[0m [36mname[0m: [35mgenrs.ResourceWrapper[?][0m = [33mthis[0m.kvObject0.kv.apply([32m"name"[0m)
    {
      [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
        {
          {
            org.scalactic.source.Position.apply(
              {
                [32m"ResourceSpec.scala"[0m
              }
            , 
              {
                [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
              }
            , 
              {
                [31m86[0m
              }
            )
          }:[35morg.scalactic.source.Position[0m
        }
      {
        {
          {
            {
              [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                [36mpos[0m: [35morg.scalactic.source.Position[0m
              ): [35morg.scalatest.compatible.Assertion[0m = 
                org.scalatest.Assertions.assertionsHelper.macroAssert(bool, clue
                  , 
                pos)
              closure($anonfun)
            }
          }
        }.apply(
          {
            {
              {
                [33mval[0m [36mx[0m: [35m(name.rtype : (): String)[0m = 
                  {
                    name.rtype
                  }
                {
                  {
                    {
                      [33mval[0m [36mx[0m: [35m([32m"string"[0m : String)[0m = 
                        {
                          [32m"string"[0m
                        }
                      {
                        {
                          {
                            [33mval[0m [36mx[0m: [35mBoolean[0m = 
                              {
                                x.==(x)
                              }
                            {
                              {
                                org.scalactic.Bool.binaryMacroBool(
                                  {
                                    x
                                  }
                                , 
                                  {
                                    [32m"=="[0m
                                  }
                                , 
                                  {
                                    x
                                  }
                                , 
                                  {
                                    x
                                  }
                                , 
                                  {
                                    {
                                      org.scalactic.Prettifier.default
                                    }
                                  }
                                )
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        , 
          {
            {
              [32m""[0m
            }
          }
        , 
          {
            {
              pos
            }
          }
        )
      }:[35morg.scalatest.compatible.Assertion[0m
    }
    {
      [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
        {
          {
            org.scalactic.source.Position.apply(
              {
                [32m"ResourceSpec.scala"[0m
              }
            , 
              {
                [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
              }
            , 
              {
                [31m87[0m
              }
            )
          }:[35morg.scalactic.source.Position[0m
        }
      {
        {
          {
            {
              [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                [36mpos[0m: [35morg.scalactic.source.Position[0m
              ): [35morg.scalatest.compatible.Assertion[0m = 
                org.scalatest.Assertions.assertionsHelper.macroAssert(bool, clue
                  , 
                pos)
              closure($anonfun)
            }
          }
        }.apply(
          {
            {
              {
                [33mval[0m [36mx[0m: [35m(name : genrs.ResourceWrapper)[0m = 
                  {
                    name
                  }
                {
                  {
                    org.scalactic.Bool.isInstanceOfMacroBool(
                      {
                        x
                      }
                    , [32m"isInstanceOf"[0m, 
                      {
                        [32m"genrs.ResourceWrapper[scala.Predef.String]"[0m
                      }
                    , 
                      {
                        x.isInstanceOf[[35mgenrs.ResourceWrapper[String][0m]
                      }
                    , 
                      {
                        {
                          org.scalactic.Prettifier.default
                        }
                      }
                    )
                  }
                }
              }
            }
          }
        , 
          {
            {
              [32m""[0m
            }
          }
        , 
          {
            {
              pos
            }
          }
        )
      }:[35morg.scalatest.compatible.Assertion[0m
    }
  } of class class dotty.tools.dotc.ast.Trees$DefDef # 22076
exception while typing {
  [33mdef[0m [36m$anonfun[0m(): [35morg.scalatest.compatible.Assertion[0m = 
    {
      [33mval[0m [36mname[0m: [35mgenrs.ResourceWrapper[?][0m = [33mthis[0m.kvObject0.kv.apply([32m"name"[0m)
      {
        [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
          {
            {
              org.scalactic.source.Position.apply(
                {
                  [32m"ResourceSpec.scala"[0m
                }
              , 
                {
                  [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                }
              , 
                {
                  [31m86[0m
                }
              )
            }:[35morg.scalactic.source.Position[0m
          }
        {
          {
            {
              {
                [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                  [36mpos[0m: [35morg.scalactic.source.Position[0m
                ): [35morg.scalatest.compatible.Assertion[0m = 
                  org.scalatest.Assertions.assertionsHelper.macroAssert(bool, 
                    clue
                  , pos)
                closure($anonfun)
              }
            }
          }.apply(
            {
              {
                {
                  [33mval[0m [36mx[0m: [35m(name.rtype : (): String)[0m = 
                    {
                      name.rtype
                    }
                  {
                    {
                      {
                        [33mval[0m [36mx[0m: [35m([32m"string"[0m : String)[0m = 
                          {
                            [32m"string"[0m
                          }
                        {
                          {
                            {
                              [33mval[0m [36mx[0m: [35mBoolean[0m = 
                                {
                                  x.==(x)
                                }
                              {
                                {
                                  org.scalactic.Bool.binaryMacroBool(
                                    {
                                      x
                                    }
                                  , 
                                    {
                                      [32m"=="[0m
                                    }
                                  , 
                                    {
                                      x
                                    }
                                  , 
                                    {
                                      x
                                    }
                                  , 
                                    {
                                      {
                                        org.scalactic.Prettifier.default
                                      }
                                    }
                                  )
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          , 
            {
              {
                [32m""[0m
              }
            }
          , 
            {
              {
                pos
              }
            }
          )
        }:[35morg.scalatest.compatible.Assertion[0m
      }
      {
        [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
          {
            {
              org.scalactic.source.Position.apply(
                {
                  [32m"ResourceSpec.scala"[0m
                }
              , 
                {
                  [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                }
              , 
                {
                  [31m87[0m
                }
              )
            }:[35morg.scalactic.source.Position[0m
          }
        {
          {
            {
              {
                [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                  [36mpos[0m: [35morg.scalactic.source.Position[0m
                ): [35morg.scalatest.compatible.Assertion[0m = 
                  org.scalatest.Assertions.assertionsHelper.macroAssert(bool, 
                    clue
                  , pos)
                closure($anonfun)
              }
            }
          }.apply(
            {
              {
                {
                  [33mval[0m [36mx[0m: [35m(name : genrs.ResourceWrapper)[0m = 
                    {
                      name
                    }
                  {
                    {
                      org.scalactic.Bool.isInstanceOfMacroBool(
                        {
                          x
                        }
                      , [32m"isInstanceOf"[0m, 
                        {
                          [32m"genrs.ResourceWrapper[scala.Predef.String]"[0m
                        }
                      , 
                        {
                          x.isInstanceOf[[35mgenrs.ResourceWrapper[String][0m]
                        }
                      , 
                        {
                          {
                            org.scalactic.Prettifier.default
                          }
                        }
                      )
                    }
                  }
                }
              }
            }
          , 
            {
              {
                [32m""[0m
              }
            }
          , 
            {
              {
                pos
              }
            }
          )
        }:[35morg.scalatest.compatible.Assertion[0m
      }
    }
  closure($anonfun)
} of class class dotty.tools.dotc.ast.Trees$Block # 22078
exception while typing <special-ops>.<cbn-arg>[[35morg.scalatest.compatible.Assertion[0m](
  {
    [33mdef[0m [36m$anonfun[0m(): [35morg.scalatest.compatible.Assertion[0m = 
      {
        [33mval[0m [36mname[0m: [35mgenrs.ResourceWrapper[?][0m = [33mthis[0m.kvObject0.kv.apply([32m"name"[0m)
        {
          [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
            {
              {
                org.scalactic.source.Position.apply(
                  {
                    [32m"ResourceSpec.scala"[0m
                  }
                , 
                  {
                    [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                  }
                , 
                  {
                    [31m86[0m
                  }
                )
              }:[35morg.scalactic.source.Position[0m
            }
          {
            {
              {
                {
                  [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                    [36mpos[0m: [35morg.scalactic.source.Position[0m
                  ): [35morg.scalatest.compatible.Assertion[0m = 
                    org.scalatest.Assertions.assertionsHelper.macroAssert(bool, 
                      clue
                    , pos)
                  closure($anonfun)
                }
              }
            }.apply(
              {
                {
                  {
                    [33mval[0m [36mx[0m: [35m(name.rtype : (): String)[0m = 
                      {
                        name.rtype
                      }
                    {
                      {
                        {
                          [33mval[0m [36mx[0m: [35m([32m"string"[0m : String)[0m = 
                            {
                              [32m"string"[0m
                            }
                          {
                            {
                              {
                                [33mval[0m [36mx[0m: [35mBoolean[0m = 
                                  {
                                    x.==(x)
                                  }
                                {
                                  {
                                    org.scalactic.Bool.binaryMacroBool(
                                      {
                                        x
                                      }
                                    , 
                                      {
                                        [32m"=="[0m
                                      }
                                    , 
                                      {
                                        x
                                      }
                                    , 
                                      {
                                        x
                                      }
                                    , 
                                      {
                                        {
                                          org.scalactic.Prettifier.default
                                        }
                                      }
                                    )
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            , 
              {
                {
                  [32m""[0m
                }
              }
            , 
              {
                {
                  pos
                }
              }
            )
          }:[35morg.scalatest.compatible.Assertion[0m
        }
        {
          [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
            {
              {
                org.scalactic.source.Position.apply(
                  {
                    [32m"ResourceSpec.scala"[0m
                  }
                , 
                  {
                    [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                  }
                , 
                  {
                    [31m87[0m
                  }
                )
              }:[35morg.scalactic.source.Position[0m
            }
          {
            {
              {
                {
                  [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                    [36mpos[0m: [35morg.scalactic.source.Position[0m
                  ): [35morg.scalatest.compatible.Assertion[0m = 
                    org.scalatest.Assertions.assertionsHelper.macroAssert(bool, 
                      clue
                    , pos)
                  closure($anonfun)
                }
              }
            }.apply(
              {
                {
                  {
                    [33mval[0m [36mx[0m: [35m(name : genrs.ResourceWrapper)[0m = 
                      {
                        name
                      }
                    {
                      {
                        org.scalactic.Bool.isInstanceOfMacroBool(
                          {
                            x
                          }
                        , [32m"isInstanceOf"[0m, 
                          {
                            [32m"genrs.ResourceWrapper[scala.Predef.String]"[0m
                          }
                        , 
                          {
                            x.isInstanceOf[[35mgenrs.ResourceWrapper[String][0m]
                          }
                        , 
                          {
                            {
                              org.scalactic.Prettifier.default
                            }
                          }
                        )
                      }
                    }
                  }
                }
              }
            , 
              {
                {
                  [32m""[0m
                }
              }
            , 
              {
                {
                  pos
                }
              }
            )
          }:[35morg.scalatest.compatible.Assertion[0m
        }
      }
    closure($anonfun)
  }
) of class class dotty.tools.dotc.ast.Trees$Apply # 23810
exception while typing [33mthis[0m.test([32m"KVObjectResource should allow untyped lookup"[0m, 
  scala.runtime.ScalaRunTime.wrapRefArray[[35morg.scalatest.Tag[0m](
    [ : [35morg.scalatest.Tag[0m]
  )
) of class class dotty.tools.dotc.ast.Trees$Apply # 23808
exception while typing [33mthis[0m.test([32m"KVObjectResource should allow untyped lookup"[0m, 
  scala.runtime.ScalaRunTime.wrapRefArray[[35morg.scalatest.Tag[0m](
    [ : [35morg.scalatest.Tag[0m]
  )
)(
  <special-ops>.<cbn-arg>[[35morg.scalatest.compatible.Assertion[0m](
    {
      [33mdef[0m [36m$anonfun[0m(): [35morg.scalatest.compatible.Assertion[0m = 
        {
          [33mval[0m [36mname[0m: [35mgenrs.ResourceWrapper[?][0m = [33mthis[0m.kvObject0.kv.apply([32m"name"[0m)
          {
            [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
              {
                {
                  org.scalactic.source.Position.apply(
                    {
                      [32m"ResourceSpec.scala"[0m
                    }
                  , 
                    {
                      [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                    }
                  , 
                    {
                      [31m86[0m
                    }
                  )
                }:[35morg.scalactic.source.Position[0m
              }
            {
              {
                {
                  {
                    [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                      [36mpos[0m: [35morg.scalactic.source.Position[0m
                    ): [35morg.scalatest.compatible.Assertion[0m = 
                      org.scalatest.Assertions.assertionsHelper.macroAssert(bool
                        , 
                      clue, pos)
                    closure($anonfun)
                  }
                }
              }.apply(
                {
                  {
                    {
                      [33mval[0m [36mx[0m: [35m(name.rtype : (): String)[0m = 
                        {
                          name.rtype
                        }
                      {
                        {
                          {
                            [33mval[0m [36mx[0m: [35m([32m"string"[0m : String)[0m = 
                              {
                                [32m"string"[0m
                              }
                            {
                              {
                                {
                                  [33mval[0m [36mx[0m: [35mBoolean[0m = 
                                    {
                                      x.==(x)
                                    }
                                  {
                                    {
                                      org.scalactic.Bool.binaryMacroBool(
                                        {
                                          x
                                        }
                                      , 
                                        {
                                          [32m"=="[0m
                                        }
                                      , 
                                        {
                                          x
                                        }
                                      , 
                                        {
                                          x
                                        }
                                      , 
                                        {
                                          {
                                            org.scalactic.Prettifier.default
                                          }
                                        }
                                      )
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              , 
                {
                  {
                    [32m""[0m
                  }
                }
              , 
                {
                  {
                    pos
                  }
                }
              )
            }:[35morg.scalatest.compatible.Assertion[0m
          }
          {
            [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
              {
                {
                  org.scalactic.source.Position.apply(
                    {
                      [32m"ResourceSpec.scala"[0m
                    }
                  , 
                    {
                      [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                    }
                  , 
                    {
                      [31m87[0m
                    }
                  )
                }:[35morg.scalactic.source.Position[0m
              }
            {
              {
                {
                  {
                    [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                      [36mpos[0m: [35morg.scalactic.source.Position[0m
                    ): [35morg.scalatest.compatible.Assertion[0m = 
                      org.scalatest.Assertions.assertionsHelper.macroAssert(bool
                        , 
                      clue, pos)
                    closure($anonfun)
                  }
                }
              }.apply(
                {
                  {
                    {
                      [33mval[0m [36mx[0m: [35m(name : genrs.ResourceWrapper)[0m = 
                        {
                          name
                        }
                      {
                        {
                          org.scalactic.Bool.isInstanceOfMacroBool(
                            {
                              x
                            }
                          , [32m"isInstanceOf"[0m, 
                            {
                              [32m"genrs.ResourceWrapper[scala.Predef.String]"[0m
                            }
                          , 
                            {
                              x.isInstanceOf[[35mgenrs.ResourceWrapper[String][0m]
                            }
                          , 
                            {
                              {
                                org.scalactic.Prettifier.default
                              }
                            }
                          )
                        }
                      }
                    }
                  }
                }
              , 
                {
                  {
                    [32m""[0m
                  }
                }
              , 
                {
                  {
                    pos
                  }
                }
              )
            }:[35morg.scalatest.compatible.Assertion[0m
          }
        }
      closure($anonfun)
    }
  )
) of class class dotty.tools.dotc.ast.Trees$Apply # 23811
exception while typing [33mthis[0m.test([32m"KVObjectResource should allow untyped lookup"[0m, 
  scala.runtime.ScalaRunTime.wrapRefArray[[35morg.scalatest.Tag[0m](
    [ : [35morg.scalatest.Tag[0m]
  )
)(
  <special-ops>.<cbn-arg>[[35morg.scalatest.compatible.Assertion[0m](
    {
      [33mdef[0m [36m$anonfun[0m(): [35morg.scalatest.compatible.Assertion[0m = 
        {
          [33mval[0m [36mname[0m: [35mgenrs.ResourceWrapper[?][0m = [33mthis[0m.kvObject0.kv.apply([32m"name"[0m)
          {
            [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
              {
                {
                  org.scalactic.source.Position.apply(
                    {
                      [32m"ResourceSpec.scala"[0m
                    }
                  , 
                    {
                      [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                    }
                  , 
                    {
                      [31m86[0m
                    }
                  )
                }:[35morg.scalactic.source.Position[0m
              }
            {
              {
                {
                  {
                    [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                      [36mpos[0m: [35morg.scalactic.source.Position[0m
                    ): [35morg.scalatest.compatible.Assertion[0m = 
                      org.scalatest.Assertions.assertionsHelper.macroAssert(bool
                        , 
                      clue, pos)
                    closure($anonfun)
                  }
                }
              }.apply(
                {
                  {
                    {
                      [33mval[0m [36mx[0m: [35m(name.rtype : (): String)[0m = 
                        {
                          name.rtype
                        }
                      {
                        {
                          {
                            [33mval[0m [36mx[0m: [35m([32m"string"[0m : String)[0m = 
                              {
                                [32m"string"[0m
                              }
                            {
                              {
                                {
                                  [33mval[0m [36mx[0m: [35mBoolean[0m = 
                                    {
                                      x.==(x)
                                    }
                                  {
                                    {
                                      org.scalactic.Bool.binaryMacroBool(
                                        {
                                          x
                                        }
                                      , 
                                        {
                                          [32m"=="[0m
                                        }
                                      , 
                                        {
                                          x
                                        }
                                      , 
                                        {
                                          x
                                        }
                                      , 
                                        {
                                          {
                                            org.scalactic.Prettifier.default
                                          }
                                        }
                                      )
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              , 
                {
                  {
                    [32m""[0m
                  }
                }
              , 
                {
                  {
                    pos
                  }
                }
              )
            }:[35morg.scalatest.compatible.Assertion[0m
          }
          {
            [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
              {
                {
                  org.scalactic.source.Position.apply(
                    {
                      [32m"ResourceSpec.scala"[0m
                    }
                  , 
                    {
                      [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                    }
                  , 
                    {
                      [31m87[0m
                    }
                  )
                }:[35morg.scalactic.source.Position[0m
              }
            {
              {
                {
                  {
                    [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                      [36mpos[0m: [35morg.scalactic.source.Position[0m
                    ): [35morg.scalatest.compatible.Assertion[0m = 
                      org.scalatest.Assertions.assertionsHelper.macroAssert(bool
                        , 
                      clue, pos)
                    closure($anonfun)
                  }
                }
              }.apply(
                {
                  {
                    {
                      [33mval[0m [36mx[0m: [35m(name : genrs.ResourceWrapper)[0m = 
                        {
                          name
                        }
                      {
                        {
                          org.scalactic.Bool.isInstanceOfMacroBool(
                            {
                              x
                            }
                          , [32m"isInstanceOf"[0m, 
                            {
                              [32m"genrs.ResourceWrapper[scala.Predef.String]"[0m
                            }
                          , 
                            {
                              x.isInstanceOf[[35mgenrs.ResourceWrapper[String][0m]
                            }
                          , 
                            {
                              {
                                org.scalactic.Prettifier.default
                              }
                            }
                          )
                        }
                      }
                    }
                  }
                }
              , 
                {
                  {
                    [32m""[0m
                  }
                }
              , 
                {
                  {
                    pos
                  }
                }
              )
            }:[35morg.scalatest.compatible.Assertion[0m
          }
        }
      closure($anonfun)
    }
  )
)(
  {
    {
      org.scalactic.source.Position.apply(
        {
          [32m"ResourceSpec.scala"[0m
        }
      , 
        {
          [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
        }
      , 
        {
          [31m88[0m
        }
      )
    }:[35morg.scalactic.source.Position[0m
  }
) of class class dotty.tools.dotc.ast.Trees$Apply # 23812
exception while typing @[35mscala.annotation.internal.SourceFile[0m(
  [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
) [33mclass[0m [35mResourceSuite[0m()[33m extends[0m [35morg.scalatest.funsuite.AnyFunSuite[0m() {
  [33mprivate[0m [33mval[0m [36m$1$[0m: [35m(String, Int, Double, Boolean)[0m = 
    Tuple4.apply[[35mString[0m, [35mInt[0m, [35mDouble[0m, [35mBoolean[0m]([32m"Hello World"[0m, [31m-12[0m, [31m3.5638[0m, [31mfalse[0m
      )
  [33mdef[0m [36mr0[0m: [35mString[0m = [33mthis[0m.$1$._1
  [33mdef[0m [36mr1[0m: [35mInt[0m = [33mthis[0m.$1$._2
  [33mdef[0m [36mr2[0m: [35mDouble[0m = [33mthis[0m.$1$._3
  [33mdef[0m [36mr3[0m: [35mBoolean[0m = [33mthis[0m.$1$._4
  [33mdef[0m [36mgenericResourceFunction[0m[[35mT[0m[35m[0m]([36mres[0m: [35mT[0m)([33mimplicit[0m [36mevidence$1[0m: [35mgenrs.Resource[T][0m)
    : 
  [35mBoolean[0m = 
    genrs.Resource.ResourceOps[[35mT[0m](res)(evidence$1).textual.==([32m""[0m).unary_!
  [33mfinal[0m [33mlazy[0m [33mmodule[0m [33mdef[0m [36mStrangeResource[0m: [35mResourceSuite.this.StrangeResource$[0m = 
    [33mnew [0m[35mResourceSuite.this.StrangeResource$[0m()
  [33mfinal[0m [33mmodule[0m [33mclass[0m [35mStrangeResource$[0m()[33m extends[0m [35mObject[0m(), [35mgenrs.GenResource[0m, [35m
    Serializable
  [0m {
    [33mdef[0m [36misCompound[0m: [35mBoolean[0m = [31mfalse[0m
    [33mdef[0m [36mrtype[0m: [35mString[0m = [32m"strange_resource"[0m
    [33mdef[0m [36mtextual[0m: [35mString[0m = [32m"I am a strange resource in text form"[0m
  }
  [33mdef[0m [36ml0[0m: [35mscala.collection.immutable.List[String][0m = 
    List.apply[[35mString[0m](
      scala.runtime.ScalaRunTime.wrapRefArray[[35mString[0m]([[32m"Hello"[0m,[32m"World"[0m : [35mString[0m]
        )
    )
  [33mdef[0m [36ml1[0m: [35mscala.collection.immutable.List[Double][0m = 
    List.apply[[35mDouble[0m](
      scala.runtime.ScalaRunTime.wrapDoubleArray(
        [[31m1.0[0m,[31m2.0[0m,[31m-6.0[0m,[31m10000.0[0m,[31m7.3[0m : [35mDouble[0m]
      )
    )
  [33mdef[0m [36ml2[0m: 
    [35mscala.collection.immutable.List[scala.collection.immutable.List[Double]][0m
   = 
    List.apply[[35mscala.collection.immutable.List[Double][0m](
      scala.runtime.ScalaRunTime.wrapRefArray[
        [35mscala.collection.immutable.List[Double][0m
      ](
        [[33mthis[0m.l1,
          List.apply[[35mDouble[0m](
            scala.runtime.ScalaRunTime.wrapDoubleArray([[31m13.3[0m,[31m-2220.0[0m : [35mDouble[0m])
          )
         : [35mscala.collection.immutable.List[Double][0m]
      )
    )
  [33mdef[0m [36mkvObject0[0m: [35mgenrs.KVObjectResource[0m = 
    genrs.KVObjectResource.apply(
      Map.apply[[35mString[0m, 
        [35m
          genrs.ResourceWrapper[?
             >: String & genrs.KVObjectResource <: String | 
              genrs.KVObjectResource
          ]
        [0m
      ](
        scala.runtime.ScalaRunTime.wrapRefArray[
          [35m(String, 
            genrs.ResourceWrapper[?
               >: String & genrs.KVObjectResource <: String | 
                genrs.KVObjectResource
            ]
          )[0m
        ](
          [
            {
              [33mval[0m [36mev$1[0m: [35mArrowAssoc[String][0m = ArrowAssoc[[35mString[0m]([32m"name"[0m)
              scala.Predef.ArrowAssoc.->$extension[[35mgenrs.ResourceWrapper[String][0m
                , 
              [35mString[0m](ev$1)(
                genrs.ResourceWrapper.apply[[35mString[0m]([32m"kvObject0"[0m)(
                  genrs.Resource.stringResource
                )
              )
            }
          ,
            {
              [33mval[0m [36mev$2[0m: [35mArrowAssoc[String][0m = ArrowAssoc[[35mString[0m]([32m"description"[0m)
              scala.Predef.ArrowAssoc.->$extension[[35mgenrs.ResourceWrapper[String][0m
                , 
              [35mString[0m](ev$2)(
                genrs.ResourceWrapper.apply[[35mString[0m]([32m"A key-value object"[0m)(
                  genrs.Resource.stringResource
                )
              )
            }
          ,
            {
              [33mval[0m [36mev$5[0m: [35mArrowAssoc[String][0m = ArrowAssoc[[35mString[0m]([32m"data"[0m)
              scala.Predef.ArrowAssoc.->$extension[
                [35mgenrs.ResourceWrapper[genrs.KVObjectResource][0m
              , [35mString[0m](ev$5)(
                genrs.ResourceWrapper.apply[[35mgenrs.KVObjectResource[0m](
                  genrs.KVObjectResource.apply(
                    Map.apply[[35mString[0m, 
                      [35m
                        genrs.ResourceWrapper[?
                           >: scala.collection.immutable.List[String & Double]
                             <: 
                          scala.collection.immutable.List[String] | 
                            scala.collection.immutable.List[Double]
                        ]
                      [0m
                    ](
                      scala.runtime.ScalaRunTime.wrapRefArray[
                        [35m(String, 
                          genrs.ResourceWrapper[?
                             >: scala.collection.immutable.List[String & Double]
                               <: 
                            scala.collection.immutable.List[String] | 
                              scala.collection.immutable.List[Double]
                          ]
                        )[0m
                      ](
                        [
                          {
                            [33mval[0m [36mev$3[0m: [35mArrowAssoc[String][0m = 
                              ArrowAssoc[[35mString[0m]([32m"l0"[0m)
                            scala.Predef.ArrowAssoc.->$extension[
                              [35m
                                genrs.ResourceWrapper[
                                  scala.collection.immutable.List[String]
                                ]
                              [0m
                            , [35mString[0m](ev$3)(
                              genrs.ResourceWrapper.apply[
                                [35mscala.collection.immutable.List[String][0m
                              ]([33mthis[0m.l0)(
                                genrs.Resource.listResource[[35mString[0m](
                                  genrs.Resource.stringResource
                                )
                              )
                            )
                          }
                        ,
                          {
                            [33mval[0m [36mev$4[0m: [35mArrowAssoc[String][0m = 
                              ArrowAssoc[[35mString[0m]([32m"l1"[0m)
                            scala.Predef.ArrowAssoc.->$extension[
                              [35m
                                genrs.ResourceWrapper[
                                  scala.collection.immutable.List[Double]
                                ]
                              [0m
                            , [35mString[0m](ev$4)(
                              genrs.ResourceWrapper.apply[
                                [35mscala.collection.immutable.List[Double][0m
                              ]([33mthis[0m.l1)(
                                genrs.Resource.listResource[[35mDouble[0m](
                                  genrs.Resource.doubleResource
                                )
                              )
                            )
                          }
                         : 
                          [35m(String, 
                            genrs.ResourceWrapper[?
                               >: 
                                scala.collection.immutable.List[String & Double]
                               <: scala.collection.immutable.List[String] | 
                                scala.collection.immutable.List[Double]
                            ]
                          )[0m
                        ]
                      )
                    )
                  )
                )(genrs.Resource.genResource[[35mgenrs.KVObjectResource[0m])
              )
            }
           : 
            [35m(String, 
              genrs.ResourceWrapper[?
                 >: String & genrs.KVObjectResource <: String | 
                  genrs.KVObjectResource
              ]
            )[0m
          ]
        )
      )
    )
  [33mthis[0m.test([32m"Simple resources should be flagged as non-compound"[0m, 
    scala.runtime.ScalaRunTime.wrapRefArray[[35morg.scalatest.Tag[0m](
      [ : [35morg.scalatest.Tag[0m]
    )
  )(
    <special-ops>.<cbn-arg>[[35morg.scalatest.compatible.Assertion[0m](
      {
        [33mdef[0m [36m$anonfun[0m(): [35morg.scalatest.compatible.Assertion[0m = 
          {
            {
              [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                {
                  {
                    org.scalactic.source.Position.apply(
                      {
                        [32m"ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [31m32[0m
                      }
                    )
                  }:[35morg.scalactic.source.Position[0m
                }
              {
                {
                  {
                    {
                      [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                        [36mpos[0m: [35morg.scalactic.source.Position[0m
                      ): [35morg.scalatest.compatible.Assertion[0m = 
                        org.scalatest.Assertions.assertionsHelper.macroAssert(
                          bool
                        , clue, pos)
                      closure($anonfun)
                    }
                  }
                }.apply(
                  {
                    {
                      {
                        {
                          org.scalactic.Bool.simpleMacroBool(
                            {
                              genrs.Resource.ResourceOps[[35mString[0m]([33mthis[0m.r0)(
                                genrs.Resource.stringResource
                              ).isCompound
                            }
                          , 
                            {
                              [32m
                                "genrs.Resource.ResourceOps[java.lang.String](ResourceSuite.this.r0)(genrs.Resource.stringResource).isCompound"
                              [0m
                            }
                          , 
                            {
                              {
                                org.scalactic.Prettifier.default
                              }
                            }
                          )
                        }
                      }.unary_!
                    }
                  }
                , 
                  {
                    {
                      [32m""[0m
                    }
                  }
                , 
                  {
                    {
                      pos
                    }
                  }
                )
              }:[35morg.scalatest.compatible.Assertion[0m
            }
            {
              [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                {
                  {
                    org.scalactic.source.Position.apply(
                      {
                        [32m"ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [31m33[0m
                      }
                    )
                  }:[35morg.scalactic.source.Position[0m
                }
              {
                {
                  {
                    {
                      [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                        [36mpos[0m: [35morg.scalactic.source.Position[0m
                      ): [35morg.scalatest.compatible.Assertion[0m = 
                        org.scalatest.Assertions.assertionsHelper.macroAssert(
                          bool
                        , clue, pos)
                      closure($anonfun)
                    }
                  }
                }.apply(
                  {
                    {
                      {
                        {
                          org.scalactic.Bool.simpleMacroBool(
                            {
                              genrs.Resource.ResourceOps[[35mInt[0m]([33mthis[0m.r1)(
                                genrs.Resource.intResource
                              ).isCompound
                            }
                          , 
                            {
                              [32m
                                "genrs.Resource.ResourceOps[scala.Int](ResourceSuite.this.r1)(genrs.Resource.intResource).isCompound"
                              [0m
                            }
                          , 
                            {
                              {
                                org.scalactic.Prettifier.default
                              }
                            }
                          )
                        }
                      }.unary_!
                    }
                  }
                , 
                  {
                    {
                      [32m""[0m
                    }
                  }
                , 
                  {
                    {
                      pos
                    }
                  }
                )
              }:[35morg.scalatest.compatible.Assertion[0m
            }
            {
              [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                {
                  {
                    org.scalactic.source.Position.apply(
                      {
                        [32m"ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [31m34[0m
                      }
                    )
                  }:[35morg.scalactic.source.Position[0m
                }
              {
                {
                  {
                    {
                      [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                        [36mpos[0m: [35morg.scalactic.source.Position[0m
                      ): [35morg.scalatest.compatible.Assertion[0m = 
                        org.scalatest.Assertions.assertionsHelper.macroAssert(
                          bool
                        , clue, pos)
                      closure($anonfun)
                    }
                  }
                }.apply(
                  {
                    {
                      {
                        {
                          org.scalactic.Bool.simpleMacroBool(
                            {
                              genrs.Resource.ResourceOps[[35mDouble[0m]([33mthis[0m.r2)(
                                genrs.Resource.doubleResource
                              ).isCompound
                            }
                          , 
                            {
                              [32m
                                "genrs.Resource.ResourceOps[scala.Double](ResourceSuite.this.r2)(genrs.Resource.doubleResource).isCompound"
                              [0m
                            }
                          , 
                            {
                              {
                                org.scalactic.Prettifier.default
                              }
                            }
                          )
                        }
                      }.unary_!
                    }
                  }
                , 
                  {
                    {
                      [32m""[0m
                    }
                  }
                , 
                  {
                    {
                      pos
                    }
                  }
                )
              }:[35morg.scalatest.compatible.Assertion[0m
            }
            {
              [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                {
                  {
                    org.scalactic.source.Position.apply(
                      {
                        [32m"ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [31m35[0m
                      }
                    )
                  }:[35morg.scalactic.source.Position[0m
                }
              {
                {
                  {
                    {
                      [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                        [36mpos[0m: [35morg.scalactic.source.Position[0m
                      ): [35morg.scalatest.compatible.Assertion[0m = 
                        org.scalatest.Assertions.assertionsHelper.macroAssert(
                          bool
                        , clue, pos)
                      closure($anonfun)
                    }
                  }
                }.apply(
                  {
                    {
                      {
                        {
                          org.scalactic.Bool.simpleMacroBool(
                            {
                              genrs.Resource.ResourceOps[[35mBoolean[0m]([33mthis[0m.r3)(
                                genrs.Resource.booleanResource
                              ).isCompound
                            }
                          , 
                            {
                              [32m
                                "genrs.Resource.ResourceOps[scala.Boolean](ResourceSuite.this.r3)(genrs.Resource.booleanResource).isCompound"
                              [0m
                            }
                          , 
                            {
                              {
                                org.scalactic.Prettifier.default
                              }
                            }
                          )
                        }
                      }.unary_!
                    }
                  }
                , 
                  {
                    {
                      [32m""[0m
                    }
                  }
                , 
                  {
                    {
                      pos
                    }
                  }
                )
              }:[35morg.scalatest.compatible.Assertion[0m
            }
          }
        closure($anonfun)
      }
    )
  )(
    {
      {
        org.scalactic.source.Position.apply(
          {
            [32m"ResourceSpec.scala"[0m
          }
        , 
          {
            [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
          }
        , 
          {
            [31m36[0m
          }
        )
      }:[35morg.scalactic.source.Position[0m
    }
  )
  [33mthis[0m.test([32m"Simple resources should know their type"[0m, 
    scala.runtime.ScalaRunTime.wrapRefArray[[35morg.scalatest.Tag[0m](
      [ : [35morg.scalatest.Tag[0m]
    )
  )(
    <special-ops>.<cbn-arg>[[35morg.scalatest.compatible.Assertion[0m](
      {
        [33mdef[0m [36m$anonfun[0m(): [35morg.scalatest.compatible.Assertion[0m = 
          {
            {
              [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                {
                  {
                    org.scalactic.source.Position.apply(
                      {
                        [32m"ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [31m39[0m
                      }
                    )
                  }:[35morg.scalactic.source.Position[0m
                }
              {
                {
                  {
                    {
                      [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                        [36mpos[0m: [35morg.scalactic.source.Position[0m
                      ): [35morg.scalatest.compatible.Assertion[0m = 
                        org.scalatest.Assertions.assertionsHelper.macroAssert(
                          bool
                        , clue, pos)
                      closure($anonfun)
                    }
                  }
                }.apply(
                  {
                    {
                      {
                        [33mval[0m [36mx[0m: 
                          [35m
                            (genrs.Resource.ResourceOps[String]#rtype : 
                              (): String
                            )
                          [0m
                         = 
                          {
                            genrs.Resource.ResourceOps[[35mString[0m]([33mthis[0m.r0)(
                              genrs.Resource.stringResource
                            ).rtype
                          }
                        {
                          {
                            {
                              [33mval[0m [36mx[0m: [35m([32m"string"[0m : String)[0m = 
                                {
                                  [32m"string"[0m
                                }
                              {
                                {
                                  {
                                    [33mval[0m [36mx[0m: [35mBoolean[0m = 
                                      {
                                        x.==(x)
                                      }
                                    {
                                      {
                                        org.scalactic.Bool.binaryMacroBool(
                                          {
                                            x
                                          }
                                        , 
                                          {
                                            [32m"=="[0m
                                          }
                                        , 
                                          {
                                            x
                                          }
                                        , 
                                          {
                                            x
                                          }
                                        , 
                                          {
                                            {
                                              org.scalactic.Prettifier.default
                                            }
                                          }
                                        )
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                , 
                  {
                    {
                      [32m""[0m
                    }
                  }
                , 
                  {
                    {
                      pos
                    }
                  }
                )
              }:[35morg.scalatest.compatible.Assertion[0m
            }
            {
              [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                {
                  {
                    org.scalactic.source.Position.apply(
                      {
                        [32m"ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [31m40[0m
                      }
                    )
                  }:[35morg.scalactic.source.Position[0m
                }
              {
                {
                  {
                    {
                      [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                        [36mpos[0m: [35morg.scalactic.source.Position[0m
                      ): [35morg.scalatest.compatible.Assertion[0m = 
                        org.scalatest.Assertions.assertionsHelper.macroAssert(
                          bool
                        , clue, pos)
                      closure($anonfun)
                    }
                  }
                }.apply(
                  {
                    {
                      {
                        [33mval[0m [36mx[0m: 
                          [35m(genrs.Resource.ResourceOps[Int]#rtype : (): String)[0m
                         = 
                          {
                            genrs.Resource.ResourceOps[[35mInt[0m]([33mthis[0m.r1)(
                              genrs.Resource.intResource
                            ).rtype
                          }
                        {
                          {
                            {
                              [33mval[0m [36mx[0m: [35m([32m"int"[0m : String)[0m = 
                                {
                                  [32m"int"[0m
                                }
                              {
                                {
                                  {
                                    [33mval[0m [36mx[0m: [35mBoolean[0m = 
                                      {
                                        x.==(x)
                                      }
                                    {
                                      {
                                        org.scalactic.Bool.binaryMacroBool(
                                          {
                                            x
                                          }
                                        , 
                                          {
                                            [32m"=="[0m
                                          }
                                        , 
                                          {
                                            x
                                          }
                                        , 
                                          {
                                            x
                                          }
                                        , 
                                          {
                                            {
                                              org.scalactic.Prettifier.default
                                            }
                                          }
                                        )
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                , 
                  {
                    {
                      [32m""[0m
                    }
                  }
                , 
                  {
                    {
                      pos
                    }
                  }
                )
              }:[35morg.scalatest.compatible.Assertion[0m
            }
            {
              [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                {
                  {
                    org.scalactic.source.Position.apply(
                      {
                        [32m"ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [31m41[0m
                      }
                    )
                  }:[35morg.scalactic.source.Position[0m
                }
              {
                {
                  {
                    {
                      [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                        [36mpos[0m: [35morg.scalactic.source.Position[0m
                      ): [35morg.scalatest.compatible.Assertion[0m = 
                        org.scalatest.Assertions.assertionsHelper.macroAssert(
                          bool
                        , clue, pos)
                      closure($anonfun)
                    }
                  }
                }.apply(
                  {
                    {
                      {
                        [33mval[0m [36mx[0m: 
                          [35m
                            (genrs.Resource.ResourceOps[Double]#rtype : 
                              (): String
                            )
                          [0m
                         = 
                          {
                            genrs.Resource.ResourceOps[[35mDouble[0m]([33mthis[0m.r2)(
                              genrs.Resource.doubleResource
                            ).rtype
                          }
                        {
                          {
                            {
                              [33mval[0m [36mx[0m: [35m([32m"double"[0m : String)[0m = 
                                {
                                  [32m"double"[0m
                                }
                              {
                                {
                                  {
                                    [33mval[0m [36mx[0m: [35mBoolean[0m = 
                                      {
                                        x.==(x)
                                      }
                                    {
                                      {
                                        org.scalactic.Bool.binaryMacroBool(
                                          {
                                            x
                                          }
                                        , 
                                          {
                                            [32m"=="[0m
                                          }
                                        , 
                                          {
                                            x
                                          }
                                        , 
                                          {
                                            x
                                          }
                                        , 
                                          {
                                            {
                                              org.scalactic.Prettifier.default
                                            }
                                          }
                                        )
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                , 
                  {
                    {
                      [32m""[0m
                    }
                  }
                , 
                  {
                    {
                      pos
                    }
                  }
                )
              }:[35morg.scalatest.compatible.Assertion[0m
            }
            {
              [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                {
                  {
                    org.scalactic.source.Position.apply(
                      {
                        [32m"ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [31m42[0m
                      }
                    )
                  }:[35morg.scalactic.source.Position[0m
                }
              {
                {
                  {
                    {
                      [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                        [36mpos[0m: [35morg.scalactic.source.Position[0m
                      ): [35morg.scalatest.compatible.Assertion[0m = 
                        org.scalatest.Assertions.assertionsHelper.macroAssert(
                          bool
                        , clue, pos)
                      closure($anonfun)
                    }
                  }
                }.apply(
                  {
                    {
                      {
                        [33mval[0m [36mx[0m: 
                          [35m
                            (genrs.Resource.ResourceOps[Boolean]#rtype : 
                              (): String
                            )
                          [0m
                         = 
                          {
                            genrs.Resource.ResourceOps[[35mBoolean[0m]([33mthis[0m.r3)(
                              genrs.Resource.booleanResource
                            ).rtype
                          }
                        {
                          {
                            {
                              [33mval[0m [36mx[0m: [35m([32m"boolean"[0m : String)[0m = 
                                {
                                  [32m"boolean"[0m
                                }
                              {
                                {
                                  {
                                    [33mval[0m [36mx[0m: [35mBoolean[0m = 
                                      {
                                        x.==(x)
                                      }
                                    {
                                      {
                                        org.scalactic.Bool.binaryMacroBool(
                                          {
                                            x
                                          }
                                        , 
                                          {
                                            [32m"=="[0m
                                          }
                                        , 
                                          {
                                            x
                                          }
                                        , 
                                          {
                                            x
                                          }
                                        , 
                                          {
                                            {
                                              org.scalactic.Prettifier.default
                                            }
                                          }
                                        )
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                , 
                  {
                    {
                      [32m""[0m
                    }
                  }
                , 
                  {
                    {
                      pos
                    }
                  }
                )
              }:[35morg.scalatest.compatible.Assertion[0m
            }
          }
        closure($anonfun)
      }
    )
  )(
    {
      {
        org.scalactic.source.Position.apply(
          {
            [32m"ResourceSpec.scala"[0m
          }
        , 
          {
            [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
          }
        , 
          {
            [31m43[0m
          }
        )
      }:[35morg.scalactic.source.Position[0m
    }
  )
  [33mthis[0m.test([32m"Simple resources should return their proper string representation"[0m
    , 
  scala.runtime.ScalaRunTime.wrapRefArray[[35morg.scalatest.Tag[0m](
    [ : [35morg.scalatest.Tag[0m]
  )
  )(
    <special-ops>.<cbn-arg>[[35morg.scalatest.compatible.Assertion[0m](
      {
        [33mdef[0m [36m$anonfun[0m(): [35morg.scalatest.compatible.Assertion[0m = 
          {
            {
              [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                {
                  {
                    org.scalactic.source.Position.apply(
                      {
                        [32m"ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [31m46[0m
                      }
                    )
                  }:[35morg.scalactic.source.Position[0m
                }
              {
                {
                  {
                    {
                      [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                        [36mpos[0m: [35morg.scalactic.source.Position[0m
                      ): [35morg.scalatest.compatible.Assertion[0m = 
                        org.scalatest.Assertions.assertionsHelper.macroAssert(
                          bool
                        , clue, pos)
                      closure($anonfun)
                    }
                  }
                }.apply(
                  {
                    {
                      {
                        [33mval[0m [36mx[0m: 
                          [35m
                            (genrs.Resource.ResourceOps[String]#textual : 
                              (): String
                            )
                          [0m
                         = 
                          {
                            genrs.Resource.ResourceOps[[35mString[0m]([33mthis[0m.r0)(
                              genrs.Resource.stringResource
                            ).textual
                          }
                        {
                          {
                            {
                              [33mval[0m [36mx[0m: [35m([32m"Hello World"[0m : String)[0m = 
                                {
                                  [32m"Hello World"[0m
                                }
                              {
                                {
                                  {
                                    [33mval[0m [36mx[0m: [35mBoolean[0m = 
                                      {
                                        x.==(x)
                                      }
                                    {
                                      {
                                        org.scalactic.Bool.binaryMacroBool(
                                          {
                                            x
                                          }
                                        , 
                                          {
                                            [32m"=="[0m
                                          }
                                        , 
                                          {
                                            x
                                          }
                                        , 
                                          {
                                            x
                                          }
                                        , 
                                          {
                                            {
                                              org.scalactic.Prettifier.default
                                            }
                                          }
                                        )
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                , 
                  {
                    {
                      [32m""[0m
                    }
                  }
                , 
                  {
                    {
                      pos
                    }
                  }
                )
              }:[35morg.scalatest.compatible.Assertion[0m
            }
            {
              [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                {
                  {
                    org.scalactic.source.Position.apply(
                      {
                        [32m"ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [31m47[0m
                      }
                    )
                  }:[35morg.scalactic.source.Position[0m
                }
              {
                {
                  {
                    {
                      [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                        [36mpos[0m: [35morg.scalactic.source.Position[0m
                      ): [35morg.scalatest.compatible.Assertion[0m = 
                        org.scalatest.Assertions.assertionsHelper.macroAssert(
                          bool
                        , clue, pos)
                      closure($anonfun)
                    }
                  }
                }.apply(
                  {
                    {
                      {
                        [33mval[0m [36mx[0m: 
                          [35m(genrs.Resource.ResourceOps[Int]#textual : (): String)[0m
                         = 
                          {
                            genrs.Resource.ResourceOps[[35mInt[0m]([33mthis[0m.r1)(
                              genrs.Resource.intResource
                            ).textual
                          }
                        {
                          {
                            {
                              [33mval[0m [36mx[0m: [35m([32m"-12"[0m : String)[0m = 
                                {
                                  [32m"-12"[0m
                                }
                              {
                                {
                                  {
                                    [33mval[0m [36mx[0m: [35mBoolean[0m = 
                                      {
                                        x.==(x)
                                      }
                                    {
                                      {
                                        org.scalactic.Bool.binaryMacroBool(
                                          {
                                            x
                                          }
                                        , 
                                          {
                                            [32m"=="[0m
                                          }
                                        , 
                                          {
                                            x
                                          }
                                        , 
                                          {
                                            x
                                          }
                                        , 
                                          {
                                            {
                                              org.scalactic.Prettifier.default
                                            }
                                          }
                                        )
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                , 
                  {
                    {
                      [32m""[0m
                    }
                  }
                , 
                  {
                    {
                      pos
                    }
                  }
                )
              }:[35morg.scalatest.compatible.Assertion[0m
            }
            {
              [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                {
                  {
                    org.scalactic.source.Position.apply(
                      {
                        [32m"ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [31m48[0m
                      }
                    )
                  }:[35morg.scalactic.source.Position[0m
                }
              {
                {
                  {
                    {
                      [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                        [36mpos[0m: [35morg.scalactic.source.Position[0m
                      ): [35morg.scalatest.compatible.Assertion[0m = 
                        org.scalatest.Assertions.assertionsHelper.macroAssert(
                          bool
                        , clue, pos)
                      closure($anonfun)
                    }
                  }
                }.apply(
                  {
                    {
                      {
                        [33mval[0m [36mx[0m: 
                          [35m
                            (genrs.Resource.ResourceOps[Double]#textual : 
                              (): String
                            )
                          [0m
                         = 
                          {
                            genrs.Resource.ResourceOps[[35mDouble[0m]([33mthis[0m.r2)(
                              genrs.Resource.doubleResource
                            ).textual
                          }
                        {
                          {
                            {
                              [33mval[0m [36mx[0m: [35m([32m"3.5638"[0m : String)[0m = 
                                {
                                  [32m"3.5638"[0m
                                }
                              {
                                {
                                  {
                                    [33mval[0m [36mx[0m: [35mBoolean[0m = 
                                      {
                                        x.==(x)
                                      }
                                    {
                                      {
                                        org.scalactic.Bool.binaryMacroBool(
                                          {
                                            x
                                          }
                                        , 
                                          {
                                            [32m"=="[0m
                                          }
                                        , 
                                          {
                                            x
                                          }
                                        , 
                                          {
                                            x
                                          }
                                        , 
                                          {
                                            {
                                              org.scalactic.Prettifier.default
                                            }
                                          }
                                        )
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                , 
                  {
                    {
                      [32m""[0m
                    }
                  }
                , 
                  {
                    {
                      pos
                    }
                  }
                )
              }:[35morg.scalatest.compatible.Assertion[0m
            }
            {
              [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                {
                  {
                    org.scalactic.source.Position.apply(
                      {
                        [32m"ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [31m49[0m
                      }
                    )
                  }:[35morg.scalactic.source.Position[0m
                }
              {
                {
                  {
                    {
                      [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                        [36mpos[0m: [35morg.scalactic.source.Position[0m
                      ): [35morg.scalatest.compatible.Assertion[0m = 
                        org.scalatest.Assertions.assertionsHelper.macroAssert(
                          bool
                        , clue, pos)
                      closure($anonfun)
                    }
                  }
                }.apply(
                  {
                    {
                      {
                        [33mval[0m [36mx[0m: 
                          [35m
                            (genrs.Resource.ResourceOps[Boolean]#textual : 
                              (): String
                            )
                          [0m
                         = 
                          {
                            genrs.Resource.ResourceOps[[35mBoolean[0m]([33mthis[0m.r3)(
                              genrs.Resource.booleanResource
                            ).textual
                          }
                        {
                          {
                            {
                              [33mval[0m [36mx[0m: [35m([32m"false"[0m : String)[0m = 
                                {
                                  [32m"false"[0m
                                }
                              {
                                {
                                  {
                                    [33mval[0m [36mx[0m: [35mBoolean[0m = 
                                      {
                                        x.==(x)
                                      }
                                    {
                                      {
                                        org.scalactic.Bool.binaryMacroBool(
                                          {
                                            x
                                          }
                                        , 
                                          {
                                            [32m"=="[0m
                                          }
                                        , 
                                          {
                                            x
                                          }
                                        , 
                                          {
                                            x
                                          }
                                        , 
                                          {
                                            {
                                              org.scalactic.Prettifier.default
                                            }
                                          }
                                        )
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                , 
                  {
                    {
                      [32m""[0m
                    }
                  }
                , 
                  {
                    {
                      pos
                    }
                  }
                )
              }:[35morg.scalatest.compatible.Assertion[0m
            }
          }
        closure($anonfun)
      }
    )
  )(
    {
      {
        org.scalactic.source.Position.apply(
          {
            [32m"ResourceSpec.scala"[0m
          }
        , 
          {
            [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
          }
        , 
          {
            [31m50[0m
          }
        )
      }:[35morg.scalactic.source.Position[0m
    }
  )
  [33mthis[0m.test([32m"Context-bounded type parameters should work for all resource types"[0m
    , 
  scala.runtime.ScalaRunTime.wrapRefArray[[35morg.scalatest.Tag[0m](
    [ : [35morg.scalatest.Tag[0m]
  )
  )(
    <special-ops>.<cbn-arg>[[35morg.scalatest.compatible.Assertion[0m](
      {
        [33mdef[0m [36m$anonfun[0m(): [35morg.scalatest.compatible.Assertion[0m = 
          {
            {
              [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                {
                  {
                    org.scalactic.source.Position.apply(
                      {
                        [32m"ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [31m53[0m
                      }
                    )
                  }:[35morg.scalactic.source.Position[0m
                }
              {
                {
                  {
                    {
                      [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                        [36mpos[0m: [35morg.scalactic.source.Position[0m
                      ): [35morg.scalatest.compatible.Assertion[0m = 
                        org.scalatest.Assertions.assertionsHelper.macroAssert(
                          bool
                        , clue, pos)
                      closure($anonfun)
                    }
                  }
                }.apply(
                  {
                    {
                      org.scalactic.Bool.simpleMacroBool(
                        {
                          {
                            [33mthis[0m.genericResourceFunction[[35mString[0m]([33mthis[0m.r0)(
                              genrs.Resource.stringResource
                            )
                          }
                        }
                      , 
                        {
                          [32m
                            "ResourceSuite.this.genericResourceFunction[java.lang.String](ResourceSuite.this.r0)(genrs.Resource.stringResource)"
                          [0m
                        }
                      , 
                        {
                          {
                            org.scalactic.Prettifier.default
                          }
                        }
                      )
                    }
                  }
                , 
                  {
                    {
                      [32m""[0m
                    }
                  }
                , 
                  {
                    {
                      pos
                    }
                  }
                )
              }:[35morg.scalatest.compatible.Assertion[0m
            }
            {
              [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                {
                  {
                    org.scalactic.source.Position.apply(
                      {
                        [32m"ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [31m54[0m
                      }
                    )
                  }:[35morg.scalactic.source.Position[0m
                }
              {
                {
                  {
                    {
                      [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                        [36mpos[0m: [35morg.scalactic.source.Position[0m
                      ): [35morg.scalatest.compatible.Assertion[0m = 
                        org.scalatest.Assertions.assertionsHelper.macroAssert(
                          bool
                        , clue, pos)
                      closure($anonfun)
                    }
                  }
                }.apply(
                  {
                    {
                      org.scalactic.Bool.simpleMacroBool(
                        {
                          {
                            [33mthis[0m.genericResourceFunction[[35mInt[0m]([33mthis[0m.r1)(
                              genrs.Resource.intResource
                            )
                          }
                        }
                      , 
                        {
                          [32m
                            "ResourceSuite.this.genericResourceFunction[scala.Int](ResourceSuite.this.r1)(genrs.Resource.intResource)"
                          [0m
                        }
                      , 
                        {
                          {
                            org.scalactic.Prettifier.default
                          }
                        }
                      )
                    }
                  }
                , 
                  {
                    {
                      [32m""[0m
                    }
                  }
                , 
                  {
                    {
                      pos
                    }
                  }
                )
              }:[35morg.scalatest.compatible.Assertion[0m
            }
            {
              [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                {
                  {
                    org.scalactic.source.Position.apply(
                      {
                        [32m"ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [31m55[0m
                      }
                    )
                  }:[35morg.scalactic.source.Position[0m
                }
              {
                {
                  {
                    {
                      [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                        [36mpos[0m: [35morg.scalactic.source.Position[0m
                      ): [35morg.scalatest.compatible.Assertion[0m = 
                        org.scalatest.Assertions.assertionsHelper.macroAssert(
                          bool
                        , clue, pos)
                      closure($anonfun)
                    }
                  }
                }.apply(
                  {
                    {
                      org.scalactic.Bool.simpleMacroBool(
                        {
                          {
                            [33mthis[0m.genericResourceFunction[[35mDouble[0m]([33mthis[0m.r2)(
                              genrs.Resource.doubleResource
                            )
                          }
                        }
                      , 
                        {
                          [32m
                            "ResourceSuite.this.genericResourceFunction[scala.Double](ResourceSuite.this.r2)(genrs.Resource.doubleResource)"
                          [0m
                        }
                      , 
                        {
                          {
                            org.scalactic.Prettifier.default
                          }
                        }
                      )
                    }
                  }
                , 
                  {
                    {
                      [32m""[0m
                    }
                  }
                , 
                  {
                    {
                      pos
                    }
                  }
                )
              }:[35morg.scalatest.compatible.Assertion[0m
            }
            {
              [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                {
                  {
                    org.scalactic.source.Position.apply(
                      {
                        [32m"ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [31m56[0m
                      }
                    )
                  }:[35morg.scalactic.source.Position[0m
                }
              {
                {
                  {
                    {
                      [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                        [36mpos[0m: [35morg.scalactic.source.Position[0m
                      ): [35morg.scalatest.compatible.Assertion[0m = 
                        org.scalatest.Assertions.assertionsHelper.macroAssert(
                          bool
                        , clue, pos)
                      closure($anonfun)
                    }
                  }
                }.apply(
                  {
                    {
                      org.scalactic.Bool.simpleMacroBool(
                        {
                          {
                            [33mthis[0m.genericResourceFunction[[35mBoolean[0m]([33mthis[0m.r3)(
                              genrs.Resource.booleanResource
                            )
                          }
                        }
                      , 
                        {
                          [32m
                            "ResourceSuite.this.genericResourceFunction[scala.Boolean](ResourceSuite.this.r3)(genrs.Resource.booleanResource)"
                          [0m
                        }
                      , 
                        {
                          {
                            org.scalactic.Prettifier.default
                          }
                        }
                      )
                    }
                  }
                , 
                  {
                    {
                      [32m""[0m
                    }
                  }
                , 
                  {
                    {
                      pos
                    }
                  }
                )
              }:[35morg.scalatest.compatible.Assertion[0m
            }
          }
        closure($anonfun)
      }
    )
  )(
    {
      {
        org.scalactic.source.Position.apply(
          {
            [32m"ResourceSpec.scala"[0m
          }
        , 
          {
            [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
          }
        , 
          {
            [31m57[0m
          }
        )
      }:[35morg.scalactic.source.Position[0m
    }
  )
  [33mthis[0m.test([32m"Members of GenResource trait should typecheck as resources"[0m, 
    scala.runtime.ScalaRunTime.wrapRefArray[[35morg.scalatest.Tag[0m](
      [ : [35morg.scalatest.Tag[0m]
    )
  )(
    <special-ops>.<cbn-arg>[[35morg.scalatest.compatible.Assertion[0m](
      {
        [33mdef[0m [36m$anonfun[0m(): [35morg.scalatest.compatible.Assertion[0m = 
          {
            {
              [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                {
                  {
                    org.scalactic.source.Position.apply(
                      {
                        [32m"ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [31m60[0m
                      }
                    )
                  }:[35morg.scalactic.source.Position[0m
                }
              {
                {
                  {
                    {
                      [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                        [36mpos[0m: [35morg.scalactic.source.Position[0m
                      ): [35morg.scalatest.compatible.Assertion[0m = 
                        org.scalatest.Assertions.assertionsHelper.macroAssert(
                          bool
                        , clue, pos)
                      closure($anonfun)
                    }
                  }
                }.apply(
                  {
                    {
                      org.scalactic.Bool.simpleMacroBool(
                        {
                          {
                            [33mthis[0m.genericResourceFunction[
                              [35mResourceSuite.this.StrangeResource$[0m
                            ]([33mthis[0m.StrangeResource)(
                              genrs.Resource.genResource[
                                [35mResourceSuite.this.StrangeResource$[0m
                              ]
                            )
                          }
                        }
                      , 
                        {
                          [32m
                            "ResourceSuite.this.genericResourceFunction[ResourceSuite.this.StrangeResource.type](ResourceSuite.this.StrangeResource)(genrs.Resource.genResource[ResourceSuite.this.StrangeResource.type])"
                          [0m
                        }
                      , 
                        {
                          {
                            org.scalactic.Prettifier.default
                          }
                        }
                      )
                    }
                  }
                , 
                  {
                    {
                      [32m""[0m
                    }
                  }
                , 
                  {
                    {
                      pos
                    }
                  }
                )
              }:[35morg.scalatest.compatible.Assertion[0m
            }
          }
        closure($anonfun)
      }
    )
  )(
    {
      {
        org.scalactic.source.Position.apply(
          {
            [32m"ResourceSpec.scala"[0m
          }
        , 
          {
            [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
          }
        , 
          {
            [31m61[0m
          }
        )
      }:[35morg.scalactic.source.Position[0m
    }
  )
  [33mthis[0m.test([32m"Lists of any resource type should typecheck as resources"[0m, 
    scala.runtime.ScalaRunTime.wrapRefArray[[35morg.scalatest.Tag[0m](
      [ : [35morg.scalatest.Tag[0m]
    )
  )(
    <special-ops>.<cbn-arg>[[35morg.scalatest.compatible.Assertion[0m](
      {
        [33mdef[0m [36m$anonfun[0m(): [35morg.scalatest.compatible.Assertion[0m = 
          {
            {
              [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                {
                  {
                    org.scalactic.source.Position.apply(
                      {
                        [32m"ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [31m64[0m
                      }
                    )
                  }:[35morg.scalactic.source.Position[0m
                }
              {
                {
                  {
                    {
                      [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                        [36mpos[0m: [35morg.scalactic.source.Position[0m
                      ): [35morg.scalatest.compatible.Assertion[0m = 
                        org.scalatest.Assertions.assertionsHelper.macroAssert(
                          bool
                        , clue, pos)
                      closure($anonfun)
                    }
                  }
                }.apply(
                  {
                    {
                      org.scalactic.Bool.simpleMacroBool(
                        {
                          {
                            [33mthis[0m.genericResourceFunction[
                              [35mscala.collection.immutable.List[String][0m
                            ]([33mthis[0m.l0)(
                              genrs.Resource.listResource[[35mString[0m](
                                genrs.Resource.stringResource
                              )
                            )
                          }
                        }
                      , 
                        {
                          [32m
                            "ResourceSuite.this.genericResourceFunction[scala.collection.immutable.List[java.lang.String]](ResourceSuite.this.l0)(genrs.Resource.listResource[java.lang.String](genrs.Resource.stringResource))"
                          [0m
                        }
                      , 
                        {
                          {
                            org.scalactic.Prettifier.default
                          }
                        }
                      )
                    }
                  }
                , 
                  {
                    {
                      [32m""[0m
                    }
                  }
                , 
                  {
                    {
                      pos
                    }
                  }
                )
              }:[35morg.scalatest.compatible.Assertion[0m
            }
            {
              [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                {
                  {
                    org.scalactic.source.Position.apply(
                      {
                        [32m"ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [31m65[0m
                      }
                    )
                  }:[35morg.scalactic.source.Position[0m
                }
              {
                {
                  {
                    {
                      [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                        [36mpos[0m: [35morg.scalactic.source.Position[0m
                      ): [35morg.scalatest.compatible.Assertion[0m = 
                        org.scalatest.Assertions.assertionsHelper.macroAssert(
                          bool
                        , clue, pos)
                      closure($anonfun)
                    }
                  }
                }.apply(
                  {
                    {
                      org.scalactic.Bool.simpleMacroBool(
                        {
                          {
                            [33mthis[0m.genericResourceFunction[
                              [35mscala.collection.immutable.List[Double][0m
                            ]([33mthis[0m.l1)(
                              genrs.Resource.listResource[[35mDouble[0m](
                                genrs.Resource.doubleResource
                              )
                            )
                          }
                        }
                      , 
                        {
                          [32m
                            "ResourceSuite.this.genericResourceFunction[scala.collection.immutable.List[scala.Double]](ResourceSuite.this.l1)(genrs.Resource.listResource[scala.Double](genrs.Resource.doubleResource))"
                          [0m
                        }
                      , 
                        {
                          {
                            org.scalactic.Prettifier.default
                          }
                        }
                      )
                    }
                  }
                , 
                  {
                    {
                      [32m""[0m
                    }
                  }
                , 
                  {
                    {
                      pos
                    }
                  }
                )
              }:[35morg.scalatest.compatible.Assertion[0m
            }
            {
              [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                {
                  {
                    org.scalactic.source.Position.apply(
                      {
                        [32m"ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [31m66[0m
                      }
                    )
                  }:[35morg.scalactic.source.Position[0m
                }
              {
                {
                  {
                    {
                      [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                        [36mpos[0m: [35morg.scalactic.source.Position[0m
                      ): [35morg.scalatest.compatible.Assertion[0m = 
                        org.scalatest.Assertions.assertionsHelper.macroAssert(
                          bool
                        , clue, pos)
                      closure($anonfun)
                    }
                  }
                }.apply(
                  {
                    {
                      org.scalactic.Bool.simpleMacroBool(
                        {
                          {
                            [33mthis[0m.genericResourceFunction[
                              [35m
                                scala.collection.immutable.List[
                                  scala.collection.immutable.List[Double]
                                ]
                              [0m
                            ]([33mthis[0m.l2)(
                              genrs.Resource.listResource[
                                [35mscala.collection.immutable.List[Double][0m
                              ](
                                genrs.Resource.listResource[[35mDouble[0m](
                                  genrs.Resource.doubleResource
                                )
                              )
                            )
                          }
                        }
                      , 
                        {
                          [32m
                            "ResourceSuite.this.genericResourceFunction[scala.collection.immutable.List[scala.collection.immutable.List[scala.Double]]](ResourceSuite.this.l2)(genrs.Resource.listResource[scala.collection.immutable.List[scala.Double]](genrs.Resource.listResource[scala.Double](genrs.Resource.doubleResource)))"
                          [0m
                        }
                      , 
                        {
                          {
                            org.scalactic.Prettifier.default
                          }
                        }
                      )
                    }
                  }
                , 
                  {
                    {
                      [32m""[0m
                    }
                  }
                , 
                  {
                    {
                      pos
                    }
                  }
                )
              }:[35morg.scalatest.compatible.Assertion[0m
            }
          }
        closure($anonfun)
      }
    )
  )(
    {
      {
        org.scalactic.source.Position.apply(
          {
            [32m"ResourceSpec.scala"[0m
          }
        , 
          {
            [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
          }
        , 
          {
            [31m67[0m
          }
        )
      }:[35morg.scalactic.source.Position[0m
    }
  )
  [33mthis[0m.test([32m"Lists should be flagged as compound resources"[0m, 
    scala.runtime.ScalaRunTime.wrapRefArray[[35morg.scalatest.Tag[0m](
      [ : [35morg.scalatest.Tag[0m]
    )
  )(
    <special-ops>.<cbn-arg>[[35morg.scalatest.compatible.Assertion[0m](
      {
        [33mdef[0m [36m$anonfun[0m(): [35morg.scalatest.compatible.Assertion[0m = 
          {
            {
              [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                {
                  {
                    org.scalactic.source.Position.apply(
                      {
                        [32m"ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [31m70[0m
                      }
                    )
                  }:[35morg.scalactic.source.Position[0m
                }
              {
                {
                  {
                    {
                      [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                        [36mpos[0m: [35morg.scalactic.source.Position[0m
                      ): [35morg.scalatest.compatible.Assertion[0m = 
                        org.scalatest.Assertions.assertionsHelper.macroAssert(
                          bool
                        , clue, pos)
                      closure($anonfun)
                    }
                  }
                }.apply(
                  {
                    {
                      org.scalactic.Bool.simpleMacroBool(
                        {
                          {
                            genrs.Resource.ResourceOps[
                              [35mscala.collection.immutable.List[String][0m
                            ]([33mthis[0m.l0)(
                              genrs.Resource.listResource[[35mString[0m](
                                genrs.Resource.stringResource
                              )
                            ).isCompound
                          }
                        }
                      , 
                        {
                          [32m
                            "genrs.Resource.ResourceOps[scala.collection.immutable.List[java.lang.String]](ResourceSuite.this.l0)(genrs.Resource.listResource[java.lang.String](genrs.Resource.stringResource)).isCompound"
                          [0m
                        }
                      , 
                        {
                          {
                            org.scalactic.Prettifier.default
                          }
                        }
                      )
                    }
                  }
                , 
                  {
                    {
                      [32m""[0m
                    }
                  }
                , 
                  {
                    {
                      pos
                    }
                  }
                )
              }:[35morg.scalatest.compatible.Assertion[0m
            }
            {
              [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                {
                  {
                    org.scalactic.source.Position.apply(
                      {
                        [32m"ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [31m71[0m
                      }
                    )
                  }:[35morg.scalactic.source.Position[0m
                }
              {
                {
                  {
                    {
                      [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                        [36mpos[0m: [35morg.scalactic.source.Position[0m
                      ): [35morg.scalatest.compatible.Assertion[0m = 
                        org.scalatest.Assertions.assertionsHelper.macroAssert(
                          bool
                        , clue, pos)
                      closure($anonfun)
                    }
                  }
                }.apply(
                  {
                    {
                      org.scalactic.Bool.simpleMacroBool(
                        {
                          {
                            genrs.Resource.ResourceOps[
                              [35mscala.collection.immutable.List[Double][0m
                            ]([33mthis[0m.l1)(
                              genrs.Resource.listResource[[35mDouble[0m](
                                genrs.Resource.doubleResource
                              )
                            ).isCompound
                          }
                        }
                      , 
                        {
                          [32m
                            "genrs.Resource.ResourceOps[scala.collection.immutable.List[scala.Double]](ResourceSuite.this.l1)(genrs.Resource.listResource[scala.Double](genrs.Resource.doubleResource)).isCompound"
                          [0m
                        }
                      , 
                        {
                          {
                            org.scalactic.Prettifier.default
                          }
                        }
                      )
                    }
                  }
                , 
                  {
                    {
                      [32m""[0m
                    }
                  }
                , 
                  {
                    {
                      pos
                    }
                  }
                )
              }:[35morg.scalatest.compatible.Assertion[0m
            }
            {
              [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                {
                  {
                    org.scalactic.source.Position.apply(
                      {
                        [32m"ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [31m72[0m
                      }
                    )
                  }:[35morg.scalactic.source.Position[0m
                }
              {
                {
                  {
                    {
                      [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                        [36mpos[0m: [35morg.scalactic.source.Position[0m
                      ): [35morg.scalatest.compatible.Assertion[0m = 
                        org.scalatest.Assertions.assertionsHelper.macroAssert(
                          bool
                        , clue, pos)
                      closure($anonfun)
                    }
                  }
                }.apply(
                  {
                    {
                      org.scalactic.Bool.simpleMacroBool(
                        {
                          {
                            genrs.Resource.ResourceOps[
                              [35m
                                scala.collection.immutable.List[
                                  scala.collection.immutable.List[Double]
                                ]
                              [0m
                            ]([33mthis[0m.l2)(
                              genrs.Resource.listResource[
                                [35mscala.collection.immutable.List[Double][0m
                              ](
                                genrs.Resource.listResource[[35mDouble[0m](
                                  genrs.Resource.doubleResource
                                )
                              )
                            ).isCompound
                          }
                        }
                      , 
                        {
                          [32m
                            "genrs.Resource.ResourceOps[scala.collection.immutable.List[scala.collection.immutable.List[scala.Double]]](ResourceSuite.this.l2)(genrs.Resource.listResource[scala.collection.immutable.List[scala.Double]](genrs.Resource.listResource[scala.Double](genrs.Resource.doubleResource))).isCompound"
                          [0m
                        }
                      , 
                        {
                          {
                            org.scalactic.Prettifier.default
                          }
                        }
                      )
                    }
                  }
                , 
                  {
                    {
                      [32m""[0m
                    }
                  }
                , 
                  {
                    {
                      pos
                    }
                  }
                )
              }:[35morg.scalatest.compatible.Assertion[0m
            }
          }
        closure($anonfun)
      }
    )
  )(
    {
      {
        org.scalactic.source.Position.apply(
          {
            [32m"ResourceSpec.scala"[0m
          }
        , 
          {
            [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
          }
        , 
          {
            [31m73[0m
          }
        )
      }:[35morg.scalactic.source.Position[0m
    }
  )
  [33mthis[0m.test([32m"KVObjectResource should typecheck as resource"[0m, 
    scala.runtime.ScalaRunTime.wrapRefArray[[35morg.scalatest.Tag[0m](
      [ : [35morg.scalatest.Tag[0m]
    )
  )(
    <special-ops>.<cbn-arg>[[35morg.scalatest.compatible.Assertion[0m](
      {
        [33mdef[0m [36m$anonfun[0m(): [35morg.scalatest.compatible.Assertion[0m = 
          {
            {
              [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                {
                  {
                    org.scalactic.source.Position.apply(
                      {
                        [32m"ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [31m76[0m
                      }
                    )
                  }:[35morg.scalactic.source.Position[0m
                }
              {
                {
                  {
                    {
                      [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                        [36mpos[0m: [35morg.scalactic.source.Position[0m
                      ): [35morg.scalatest.compatible.Assertion[0m = 
                        org.scalatest.Assertions.assertionsHelper.macroAssert(
                          bool
                        , clue, pos)
                      closure($anonfun)
                    }
                  }
                }.apply(
                  {
                    {
                      org.scalactic.Bool.simpleMacroBool(
                        {
                          {
                            [33mthis[0m.genericResourceFunction[[35mgenrs.KVObjectResource[0m]
                              (
                            [33mthis[0m.kvObject0)(
                              genrs.Resource.genResource[[35mgenrs.KVObjectResource[0m]
                            )
                          }
                        }
                      , 
                        {
                          [32m
                            "ResourceSuite.this.genericResourceFunction[genrs.KVObjectResource](ResourceSuite.this.kvObject0)(genrs.Resource.genResource[genrs.KVObjectResource])"
                          [0m
                        }
                      , 
                        {
                          {
                            org.scalactic.Prettifier.default
                          }
                        }
                      )
                    }
                  }
                , 
                  {
                    {
                      [32m""[0m
                    }
                  }
                , 
                  {
                    {
                      pos
                    }
                  }
                )
              }:[35morg.scalatest.compatible.Assertion[0m
            }
          }
        closure($anonfun)
      }
    )
  )(
    {
      {
        org.scalactic.source.Position.apply(
          {
            [32m"ResourceSpec.scala"[0m
          }
        , 
          {
            [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
          }
        , 
          {
            [31m77[0m
          }
        )
      }:[35morg.scalactic.source.Position[0m
    }
  )
  [33mthis[0m.test([32m"KVObjectResource should allow typed lookup"[0m, 
    scala.runtime.ScalaRunTime.wrapRefArray[[35morg.scalatest.Tag[0m](
      [ : [35morg.scalatest.Tag[0m]
    )
  )(
    <special-ops>.<cbn-arg>[[35morg.scalatest.compatible.Assertion[0m](
      {
        [33mdef[0m [36m$anonfun[0m(): [35morg.scalatest.compatible.Assertion[0m = 
          {
            [33mval[0m [36mname[0m: [35mString[0m = 
              [33mthis[0m.kvObject0.apply[[35mString[0m]([32m"name"[0m)(genrs.Resource.stringResource
                )
            {
              [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                {
                  {
                    org.scalactic.source.Position.apply(
                      {
                        [32m"ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [31m81[0m
                      }
                    )
                  }:[35morg.scalactic.source.Position[0m
                }
              {
                {
                  {
                    {
                      [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                        [36mpos[0m: [35morg.scalactic.source.Position[0m
                      ): [35morg.scalatest.compatible.Assertion[0m = 
                        org.scalatest.Assertions.assertionsHelper.macroAssert(
                          bool
                        , clue, pos)
                      closure($anonfun)
                    }
                  }
                }.apply(
                  {
                    {
                      {
                        [33mval[0m [36mx[0m: 
                          [35m
                            (genrs.Resource.ResourceOps[String]#rtype : 
                              (): String
                            )
                          [0m
                         = 
                          {
                            genrs.Resource.ResourceOps[[35mString[0m](name)(
                              genrs.Resource.stringResource
                            ).rtype
                          }
                        {
                          {
                            {
                              [33mval[0m [36mx[0m: [35m([32m"string"[0m : String)[0m = 
                                {
                                  [32m"string"[0m
                                }
                              {
                                {
                                  {
                                    [33mval[0m [36mx[0m: [35mBoolean[0m = 
                                      {
                                        x.==(x)
                                      }
                                    {
                                      {
                                        org.scalactic.Bool.binaryMacroBool(
                                          {
                                            x
                                          }
                                        , 
                                          {
                                            [32m"=="[0m
                                          }
                                        , 
                                          {
                                            x
                                          }
                                        , 
                                          {
                                            x
                                          }
                                        , 
                                          {
                                            {
                                              org.scalactic.Prettifier.default
                                            }
                                          }
                                        )
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                , 
                  {
                    {
                      [32m""[0m
                    }
                  }
                , 
                  {
                    {
                      pos
                    }
                  }
                )
              }:[35morg.scalatest.compatible.Assertion[0m
            }
          }
        closure($anonfun)
      }
    )
  )(
    {
      {
        org.scalactic.source.Position.apply(
          {
            [32m"ResourceSpec.scala"[0m
          }
        , 
          {
            [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
          }
        , 
          {
            [31m82[0m
          }
        )
      }:[35morg.scalactic.source.Position[0m
    }
  )
  [33mthis[0m.test([32m"KVObjectResource should allow untyped lookup"[0m, 
    scala.runtime.ScalaRunTime.wrapRefArray[[35morg.scalatest.Tag[0m](
      [ : [35morg.scalatest.Tag[0m]
    )
  )(
    <special-ops>.<cbn-arg>[[35morg.scalatest.compatible.Assertion[0m](
      {
        [33mdef[0m [36m$anonfun[0m(): [35morg.scalatest.compatible.Assertion[0m = 
          {
            [33mval[0m [36mname[0m: [35mgenrs.ResourceWrapper[?][0m = [33mthis[0m.kvObject0.kv.apply([32m"name"[0m)
            {
              [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                {
                  {
                    org.scalactic.source.Position.apply(
                      {
                        [32m"ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [31m86[0m
                      }
                    )
                  }:[35morg.scalactic.source.Position[0m
                }
              {
                {
                  {
                    {
                      [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                        [36mpos[0m: [35morg.scalactic.source.Position[0m
                      ): [35morg.scalatest.compatible.Assertion[0m = 
                        org.scalatest.Assertions.assertionsHelper.macroAssert(
                          bool
                        , clue, pos)
                      closure($anonfun)
                    }
                  }
                }.apply(
                  {
                    {
                      {
                        [33mval[0m [36mx[0m: [35m(name.rtype : (): String)[0m = 
                          {
                            name.rtype
                          }
                        {
                          {
                            {
                              [33mval[0m [36mx[0m: [35m([32m"string"[0m : String)[0m = 
                                {
                                  [32m"string"[0m
                                }
                              {
                                {
                                  {
                                    [33mval[0m [36mx[0m: [35mBoolean[0m = 
                                      {
                                        x.==(x)
                                      }
                                    {
                                      {
                                        org.scalactic.Bool.binaryMacroBool(
                                          {
                                            x
                                          }
                                        , 
                                          {
                                            [32m"=="[0m
                                          }
                                        , 
                                          {
                                            x
                                          }
                                        , 
                                          {
                                            x
                                          }
                                        , 
                                          {
                                            {
                                              org.scalactic.Prettifier.default
                                            }
                                          }
                                        )
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                , 
                  {
                    {
                      [32m""[0m
                    }
                  }
                , 
                  {
                    {
                      pos
                    }
                  }
                )
              }:[35morg.scalatest.compatible.Assertion[0m
            }
            {
              [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                {
                  {
                    org.scalactic.source.Position.apply(
                      {
                        [32m"ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                      }
                    , 
                      {
                        [31m87[0m
                      }
                    )
                  }:[35morg.scalactic.source.Position[0m
                }
              {
                {
                  {
                    {
                      [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                        [36mpos[0m: [35morg.scalactic.source.Position[0m
                      ): [35morg.scalatest.compatible.Assertion[0m = 
                        org.scalatest.Assertions.assertionsHelper.macroAssert(
                          bool
                        , clue, pos)
                      closure($anonfun)
                    }
                  }
                }.apply(
                  {
                    {
                      {
                        [33mval[0m [36mx[0m: [35m(name : genrs.ResourceWrapper)[0m = 
                          {
                            name
                          }
                        {
                          {
                            org.scalactic.Bool.isInstanceOfMacroBool(
                              {
                                x
                              }
                            , [32m"isInstanceOf"[0m, 
                              {
                                [32m"genrs.ResourceWrapper[scala.Predef.String]"[0m
                              }
                            , 
                              {
                                x.isInstanceOf[[35mgenrs.ResourceWrapper[String][0m]
                              }
                            , 
                              {
                                {
                                  org.scalactic.Prettifier.default
                                }
                              }
                            )
                          }
                        }
                      }
                    }
                  }
                , 
                  {
                    {
                      [32m""[0m
                    }
                  }
                , 
                  {
                    {
                      pos
                    }
                  }
                )
              }:[35morg.scalatest.compatible.Assertion[0m
            }
          }
        closure($anonfun)
      }
    )
  )(
    {
      {
        org.scalactic.source.Position.apply(
          {
            [32m"ResourceSpec.scala"[0m
          }
        , 
          {
            [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
          }
        , 
          {
            [31m88[0m
          }
        )
      }:[35morg.scalactic.source.Position[0m
    }
  )
} of class class dotty.tools.dotc.ast.Trees$TypeDef # 23814
exception while typing [33mpackage [0mgenrs.test {
  @[35mscala.annotation.internal.SourceFile[0m(
    [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
  ) [33mclass[0m [35mResourceSuite[0m()[33m extends[0m [35morg.scalatest.funsuite.AnyFunSuite[0m() {
    [33mprivate[0m [33mval[0m [36m$1$[0m: [35m(String, Int, Double, Boolean)[0m = 
      Tuple4.apply[[35mString[0m, [35mInt[0m, [35mDouble[0m, [35mBoolean[0m]([32m"Hello World"[0m, [31m-12[0m, [31m3.5638[0m, 
        [31mfalse[0m
      )
    [33mdef[0m [36mr0[0m: [35mString[0m = [33mthis[0m.$1$._1
    [33mdef[0m [36mr1[0m: [35mInt[0m = [33mthis[0m.$1$._2
    [33mdef[0m [36mr2[0m: [35mDouble[0m = [33mthis[0m.$1$._3
    [33mdef[0m [36mr3[0m: [35mBoolean[0m = [33mthis[0m.$1$._4
    [33mdef[0m [36mgenericResourceFunction[0m[[35mT[0m[35m[0m]([36mres[0m: [35mT[0m)(
      [33mimplicit[0m [36mevidence$1[0m: [35mgenrs.Resource[T][0m
    ): [35mBoolean[0m = 
      genrs.Resource.ResourceOps[[35mT[0m](res)(evidence$1).textual.==([32m""[0m).unary_!
    [33mfinal[0m [33mlazy[0m [33mmodule[0m [33mdef[0m [36mStrangeResource[0m: [35mResourceSuite.this.StrangeResource$[0m
       = 
    [33mnew [0m[35mResourceSuite.this.StrangeResource$[0m()
    [33mfinal[0m [33mmodule[0m [33mclass[0m [35mStrangeResource$[0m()[33m extends[0m [35mObject[0m(), [35mgenrs.GenResource[0m, [35m
      Serializable
    [0m {
      [33mdef[0m [36misCompound[0m: [35mBoolean[0m = [31mfalse[0m
      [33mdef[0m [36mrtype[0m: [35mString[0m = [32m"strange_resource"[0m
      [33mdef[0m [36mtextual[0m: [35mString[0m = [32m"I am a strange resource in text form"[0m
    }
    [33mdef[0m [36ml0[0m: [35mscala.collection.immutable.List[String][0m = 
      List.apply[[35mString[0m](
        scala.runtime.ScalaRunTime.wrapRefArray[[35mString[0m](
          [[32m"Hello"[0m,[32m"World"[0m : [35mString[0m]
        )
      )
    [33mdef[0m [36ml1[0m: [35mscala.collection.immutable.List[Double][0m = 
      List.apply[[35mDouble[0m](
        scala.runtime.ScalaRunTime.wrapDoubleArray(
          [[31m1.0[0m,[31m2.0[0m,[31m-6.0[0m,[31m10000.0[0m,[31m7.3[0m : [35mDouble[0m]
        )
      )
    [33mdef[0m [36ml2[0m: 
      [35mscala.collection.immutable.List[scala.collection.immutable.List[Double]][0m
     = 
      List.apply[[35mscala.collection.immutable.List[Double][0m](
        scala.runtime.ScalaRunTime.wrapRefArray[
          [35mscala.collection.immutable.List[Double][0m
        ](
          [[33mthis[0m.l1,
            List.apply[[35mDouble[0m](
              scala.runtime.ScalaRunTime.wrapDoubleArray([[31m13.3[0m,[31m-2220.0[0m : [35mDouble[0m]
                )
            )
           : [35mscala.collection.immutable.List[Double][0m]
        )
      )
    [33mdef[0m [36mkvObject0[0m: [35mgenrs.KVObjectResource[0m = 
      genrs.KVObjectResource.apply(
        Map.apply[[35mString[0m, 
          [35m
            genrs.ResourceWrapper[?
               >: String & genrs.KVObjectResource <: String | 
                genrs.KVObjectResource
            ]
          [0m
        ](
          scala.runtime.ScalaRunTime.wrapRefArray[
            [35m(String, 
              genrs.ResourceWrapper[?
                 >: String & genrs.KVObjectResource <: String | 
                  genrs.KVObjectResource
              ]
            )[0m
          ](
            [
              {
                [33mval[0m [36mev$1[0m: [35mArrowAssoc[String][0m = ArrowAssoc[[35mString[0m]([32m"name"[0m)
                scala.Predef.ArrowAssoc.->$extension[
                  [35mgenrs.ResourceWrapper[String][0m
                , [35mString[0m](ev$1)(
                  genrs.ResourceWrapper.apply[[35mString[0m]([32m"kvObject0"[0m)(
                    genrs.Resource.stringResource
                  )
                )
              }
            ,
              {
                [33mval[0m [36mev$2[0m: [35mArrowAssoc[String][0m = ArrowAssoc[[35mString[0m]([32m"description"[0m)
                scala.Predef.ArrowAssoc.->$extension[
                  [35mgenrs.ResourceWrapper[String][0m
                , [35mString[0m](ev$2)(
                  genrs.ResourceWrapper.apply[[35mString[0m]([32m"A key-value object"[0m)(
                    genrs.Resource.stringResource
                  )
                )
              }
            ,
              {
                [33mval[0m [36mev$5[0m: [35mArrowAssoc[String][0m = ArrowAssoc[[35mString[0m]([32m"data"[0m)
                scala.Predef.ArrowAssoc.->$extension[
                  [35mgenrs.ResourceWrapper[genrs.KVObjectResource][0m
                , [35mString[0m](ev$5)(
                  genrs.ResourceWrapper.apply[[35mgenrs.KVObjectResource[0m](
                    genrs.KVObjectResource.apply(
                      Map.apply[[35mString[0m, 
                        [35m
                          genrs.ResourceWrapper[?
                             >: scala.collection.immutable.List[String & Double]
                               <: 
                            scala.collection.immutable.List[String] | 
                              scala.collection.immutable.List[Double]
                          ]
                        [0m
                      ](
                        scala.runtime.ScalaRunTime.wrapRefArray[
                          [35m(String, 
                            genrs.ResourceWrapper[?
                               >: 
                                scala.collection.immutable.List[String & Double]
                               <: scala.collection.immutable.List[String] | 
                                scala.collection.immutable.List[Double]
                            ]
                          )[0m
                        ](
                          [
                            {
                              [33mval[0m [36mev$3[0m: [35mArrowAssoc[String][0m = 
                                ArrowAssoc[[35mString[0m]([32m"l0"[0m)
                              scala.Predef.ArrowAssoc.->$extension[
                                [35m
                                  genrs.ResourceWrapper[
                                    scala.collection.immutable.List[String]
                                  ]
                                [0m
                              , [35mString[0m](ev$3)(
                                genrs.ResourceWrapper.apply[
                                  [35mscala.collection.immutable.List[String][0m
                                ]([33mthis[0m.l0)(
                                  genrs.Resource.listResource[[35mString[0m](
                                    genrs.Resource.stringResource
                                  )
                                )
                              )
                            }
                          ,
                            {
                              [33mval[0m [36mev$4[0m: [35mArrowAssoc[String][0m = 
                                ArrowAssoc[[35mString[0m]([32m"l1"[0m)
                              scala.Predef.ArrowAssoc.->$extension[
                                [35m
                                  genrs.ResourceWrapper[
                                    scala.collection.immutable.List[Double]
                                  ]
                                [0m
                              , [35mString[0m](ev$4)(
                                genrs.ResourceWrapper.apply[
                                  [35mscala.collection.immutable.List[Double][0m
                                ]([33mthis[0m.l1)(
                                  genrs.Resource.listResource[[35mDouble[0m](
                                    genrs.Resource.doubleResource
                                  )
                                )
                              )
                            }
                           : 
                            [35m(String, 
                              genrs.ResourceWrapper[?
                                 >: 
                                  scala.collection.immutable.List[String & 
                                    Double
                                  ]
                                 <: scala.collection.immutable.List[String] | 
                                  scala.collection.immutable.List[Double]
                              ]
                            )[0m
                          ]
                        )
                      )
                    )
                  )(genrs.Resource.genResource[[35mgenrs.KVObjectResource[0m])
                )
              }
             : 
              [35m(String, 
                genrs.ResourceWrapper[?
                   >: String & genrs.KVObjectResource <: String | 
                    genrs.KVObjectResource
                ]
              )[0m
            ]
          )
        )
      )
    [33mthis[0m.test([32m"Simple resources should be flagged as non-compound"[0m, 
      scala.runtime.ScalaRunTime.wrapRefArray[[35morg.scalatest.Tag[0m](
        [ : [35morg.scalatest.Tag[0m]
      )
    )(
      <special-ops>.<cbn-arg>[[35morg.scalatest.compatible.Assertion[0m](
        {
          [33mdef[0m [36m$anonfun[0m(): [35morg.scalatest.compatible.Assertion[0m = 
            {
              {
                [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                  {
                    {
                      org.scalactic.source.Position.apply(
                        {
                          [32m"ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [31m32[0m
                        }
                      )
                    }:[35morg.scalactic.source.Position[0m
                  }
                {
                  {
                    {
                      {
                        [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                          [36mpos[0m: [35morg.scalactic.source.Position[0m
                        ): [35morg.scalatest.compatible.Assertion[0m = 
                          org.scalatest.Assertions.assertionsHelper.macroAssert(
                            bool
                          , clue, pos)
                        closure($anonfun)
                      }
                    }
                  }.apply(
                    {
                      {
                        {
                          {
                            org.scalactic.Bool.simpleMacroBool(
                              {
                                genrs.Resource.ResourceOps[[35mString[0m]([33mthis[0m.r0)(
                                  genrs.Resource.stringResource
                                ).isCompound
                              }
                            , 
                              {
                                [32m
                                  "genrs.Resource.ResourceOps[java.lang.String](ResourceSuite.this.r0)(genrs.Resource.stringResource).isCompound"
                                [0m
                              }
                            , 
                              {
                                {
                                  org.scalactic.Prettifier.default
                                }
                              }
                            )
                          }
                        }.unary_!
                      }
                    }
                  , 
                    {
                      {
                        [32m""[0m
                      }
                    }
                  , 
                    {
                      {
                        pos
                      }
                    }
                  )
                }:[35morg.scalatest.compatible.Assertion[0m
              }
              {
                [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                  {
                    {
                      org.scalactic.source.Position.apply(
                        {
                          [32m"ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [31m33[0m
                        }
                      )
                    }:[35morg.scalactic.source.Position[0m
                  }
                {
                  {
                    {
                      {
                        [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                          [36mpos[0m: [35morg.scalactic.source.Position[0m
                        ): [35morg.scalatest.compatible.Assertion[0m = 
                          org.scalatest.Assertions.assertionsHelper.macroAssert(
                            bool
                          , clue, pos)
                        closure($anonfun)
                      }
                    }
                  }.apply(
                    {
                      {
                        {
                          {
                            org.scalactic.Bool.simpleMacroBool(
                              {
                                genrs.Resource.ResourceOps[[35mInt[0m]([33mthis[0m.r1)(
                                  genrs.Resource.intResource
                                ).isCompound
                              }
                            , 
                              {
                                [32m
                                  "genrs.Resource.ResourceOps[scala.Int](ResourceSuite.this.r1)(genrs.Resource.intResource).isCompound"
                                [0m
                              }
                            , 
                              {
                                {
                                  org.scalactic.Prettifier.default
                                }
                              }
                            )
                          }
                        }.unary_!
                      }
                    }
                  , 
                    {
                      {
                        [32m""[0m
                      }
                    }
                  , 
                    {
                      {
                        pos
                      }
                    }
                  )
                }:[35morg.scalatest.compatible.Assertion[0m
              }
              {
                [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                  {
                    {
                      org.scalactic.source.Position.apply(
                        {
                          [32m"ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [31m34[0m
                        }
                      )
                    }:[35morg.scalactic.source.Position[0m
                  }
                {
                  {
                    {
                      {
                        [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                          [36mpos[0m: [35morg.scalactic.source.Position[0m
                        ): [35morg.scalatest.compatible.Assertion[0m = 
                          org.scalatest.Assertions.assertionsHelper.macroAssert(
                            bool
                          , clue, pos)
                        closure($anonfun)
                      }
                    }
                  }.apply(
                    {
                      {
                        {
                          {
                            org.scalactic.Bool.simpleMacroBool(
                              {
                                genrs.Resource.ResourceOps[[35mDouble[0m]([33mthis[0m.r2)(
                                  genrs.Resource.doubleResource
                                ).isCompound
                              }
                            , 
                              {
                                [32m
                                  "genrs.Resource.ResourceOps[scala.Double](ResourceSuite.this.r2)(genrs.Resource.doubleResource).isCompound"
                                [0m
                              }
                            , 
                              {
                                {
                                  org.scalactic.Prettifier.default
                                }
                              }
                            )
                          }
                        }.unary_!
                      }
                    }
                  , 
                    {
                      {
                        [32m""[0m
                      }
                    }
                  , 
                    {
                      {
                        pos
                      }
                    }
                  )
                }:[35morg.scalatest.compatible.Assertion[0m
              }
              {
                [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                  {
                    {
                      org.scalactic.source.Position.apply(
                        {
                          [32m"ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [31m35[0m
                        }
                      )
                    }:[35morg.scalactic.source.Position[0m
                  }
                {
                  {
                    {
                      {
                        [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                          [36mpos[0m: [35morg.scalactic.source.Position[0m
                        ): [35morg.scalatest.compatible.Assertion[0m = 
                          org.scalatest.Assertions.assertionsHelper.macroAssert(
                            bool
                          , clue, pos)
                        closure($anonfun)
                      }
                    }
                  }.apply(
                    {
                      {
                        {
                          {
                            org.scalactic.Bool.simpleMacroBool(
                              {
                                genrs.Resource.ResourceOps[[35mBoolean[0m]([33mthis[0m.r3)(
                                  genrs.Resource.booleanResource
                                ).isCompound
                              }
                            , 
                              {
                                [32m
                                  "genrs.Resource.ResourceOps[scala.Boolean](ResourceSuite.this.r3)(genrs.Resource.booleanResource).isCompound"
                                [0m
                              }
                            , 
                              {
                                {
                                  org.scalactic.Prettifier.default
                                }
                              }
                            )
                          }
                        }.unary_!
                      }
                    }
                  , 
                    {
                      {
                        [32m""[0m
                      }
                    }
                  , 
                    {
                      {
                        pos
                      }
                    }
                  )
                }:[35morg.scalatest.compatible.Assertion[0m
              }
            }
          closure($anonfun)
        }
      )
    )(
      {
        {
          org.scalactic.source.Position.apply(
            {
              [32m"ResourceSpec.scala"[0m
            }
          , 
            {
              [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
            }
          , 
            {
              [31m36[0m
            }
          )
        }:[35morg.scalactic.source.Position[0m
      }
    )
    [33mthis[0m.test([32m"Simple resources should know their type"[0m, 
      scala.runtime.ScalaRunTime.wrapRefArray[[35morg.scalatest.Tag[0m](
        [ : [35morg.scalatest.Tag[0m]
      )
    )(
      <special-ops>.<cbn-arg>[[35morg.scalatest.compatible.Assertion[0m](
        {
          [33mdef[0m [36m$anonfun[0m(): [35morg.scalatest.compatible.Assertion[0m = 
            {
              {
                [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                  {
                    {
                      org.scalactic.source.Position.apply(
                        {
                          [32m"ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [31m39[0m
                        }
                      )
                    }:[35morg.scalactic.source.Position[0m
                  }
                {
                  {
                    {
                      {
                        [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                          [36mpos[0m: [35morg.scalactic.source.Position[0m
                        ): [35morg.scalatest.compatible.Assertion[0m = 
                          org.scalatest.Assertions.assertionsHelper.macroAssert(
                            bool
                          , clue, pos)
                        closure($anonfun)
                      }
                    }
                  }.apply(
                    {
                      {
                        {
                          [33mval[0m [36mx[0m: 
                            [35m
                              (genrs.Resource.ResourceOps[String]#rtype : 
                                (): String
                              )
                            [0m
                           = 
                            {
                              genrs.Resource.ResourceOps[[35mString[0m]([33mthis[0m.r0)(
                                genrs.Resource.stringResource
                              ).rtype
                            }
                          {
                            {
                              {
                                [33mval[0m [36mx[0m: [35m([32m"string"[0m : String)[0m = 
                                  {
                                    [32m"string"[0m
                                  }
                                {
                                  {
                                    {
                                      [33mval[0m [36mx[0m: [35mBoolean[0m = 
                                        {
                                          x.==(x)
                                        }
                                      {
                                        {
                                          org.scalactic.Bool.binaryMacroBool(
                                            {
                                              x
                                            }
                                          , 
                                            {
                                              [32m"=="[0m
                                            }
                                          , 
                                            {
                                              x
                                            }
                                          , 
                                            {
                                              x
                                            }
                                          , 
                                            {
                                              {
                                                org.scalactic.Prettifier.default
                                              }
                                            }
                                          )
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  , 
                    {
                      {
                        [32m""[0m
                      }
                    }
                  , 
                    {
                      {
                        pos
                      }
                    }
                  )
                }:[35morg.scalatest.compatible.Assertion[0m
              }
              {
                [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                  {
                    {
                      org.scalactic.source.Position.apply(
                        {
                          [32m"ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [31m40[0m
                        }
                      )
                    }:[35morg.scalactic.source.Position[0m
                  }
                {
                  {
                    {
                      {
                        [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                          [36mpos[0m: [35morg.scalactic.source.Position[0m
                        ): [35morg.scalatest.compatible.Assertion[0m = 
                          org.scalatest.Assertions.assertionsHelper.macroAssert(
                            bool
                          , clue, pos)
                        closure($anonfun)
                      }
                    }
                  }.apply(
                    {
                      {
                        {
                          [33mval[0m [36mx[0m: 
                            [35m(genrs.Resource.ResourceOps[Int]#rtype : (): String)[0m
                           = 
                            {
                              genrs.Resource.ResourceOps[[35mInt[0m]([33mthis[0m.r1)(
                                genrs.Resource.intResource
                              ).rtype
                            }
                          {
                            {
                              {
                                [33mval[0m [36mx[0m: [35m([32m"int"[0m : String)[0m = 
                                  {
                                    [32m"int"[0m
                                  }
                                {
                                  {
                                    {
                                      [33mval[0m [36mx[0m: [35mBoolean[0m = 
                                        {
                                          x.==(x)
                                        }
                                      {
                                        {
                                          org.scalactic.Bool.binaryMacroBool(
                                            {
                                              x
                                            }
                                          , 
                                            {
                                              [32m"=="[0m
                                            }
                                          , 
                                            {
                                              x
                                            }
                                          , 
                                            {
                                              x
                                            }
                                          , 
                                            {
                                              {
                                                org.scalactic.Prettifier.default
                                              }
                                            }
                                          )
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  , 
                    {
                      {
                        [32m""[0m
                      }
                    }
                  , 
                    {
                      {
                        pos
                      }
                    }
                  )
                }:[35morg.scalatest.compatible.Assertion[0m
              }
              {
                [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                  {
                    {
                      org.scalactic.source.Position.apply(
                        {
                          [32m"ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [31m41[0m
                        }
                      )
                    }:[35morg.scalactic.source.Position[0m
                  }
                {
                  {
                    {
                      {
                        [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                          [36mpos[0m: [35morg.scalactic.source.Position[0m
                        ): [35morg.scalatest.compatible.Assertion[0m = 
                          org.scalatest.Assertions.assertionsHelper.macroAssert(
                            bool
                          , clue, pos)
                        closure($anonfun)
                      }
                    }
                  }.apply(
                    {
                      {
                        {
                          [33mval[0m [36mx[0m: 
                            [35m
                              (genrs.Resource.ResourceOps[Double]#rtype : 
                                (): String
                              )
                            [0m
                           = 
                            {
                              genrs.Resource.ResourceOps[[35mDouble[0m]([33mthis[0m.r2)(
                                genrs.Resource.doubleResource
                              ).rtype
                            }
                          {
                            {
                              {
                                [33mval[0m [36mx[0m: [35m([32m"double"[0m : String)[0m = 
                                  {
                                    [32m"double"[0m
                                  }
                                {
                                  {
                                    {
                                      [33mval[0m [36mx[0m: [35mBoolean[0m = 
                                        {
                                          x.==(x)
                                        }
                                      {
                                        {
                                          org.scalactic.Bool.binaryMacroBool(
                                            {
                                              x
                                            }
                                          , 
                                            {
                                              [32m"=="[0m
                                            }
                                          , 
                                            {
                                              x
                                            }
                                          , 
                                            {
                                              x
                                            }
                                          , 
                                            {
                                              {
                                                org.scalactic.Prettifier.default
                                              }
                                            }
                                          )
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  , 
                    {
                      {
                        [32m""[0m
                      }
                    }
                  , 
                    {
                      {
                        pos
                      }
                    }
                  )
                }:[35morg.scalatest.compatible.Assertion[0m
              }
              {
                [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                  {
                    {
                      org.scalactic.source.Position.apply(
                        {
                          [32m"ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [31m42[0m
                        }
                      )
                    }:[35morg.scalactic.source.Position[0m
                  }
                {
                  {
                    {
                      {
                        [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                          [36mpos[0m: [35morg.scalactic.source.Position[0m
                        ): [35morg.scalatest.compatible.Assertion[0m = 
                          org.scalatest.Assertions.assertionsHelper.macroAssert(
                            bool
                          , clue, pos)
                        closure($anonfun)
                      }
                    }
                  }.apply(
                    {
                      {
                        {
                          [33mval[0m [36mx[0m: 
                            [35m
                              (genrs.Resource.ResourceOps[Boolean]#rtype : 
                                (): String
                              )
                            [0m
                           = 
                            {
                              genrs.Resource.ResourceOps[[35mBoolean[0m]([33mthis[0m.r3)(
                                genrs.Resource.booleanResource
                              ).rtype
                            }
                          {
                            {
                              {
                                [33mval[0m [36mx[0m: [35m([32m"boolean"[0m : String)[0m = 
                                  {
                                    [32m"boolean"[0m
                                  }
                                {
                                  {
                                    {
                                      [33mval[0m [36mx[0m: [35mBoolean[0m = 
                                        {
                                          x.==(x)
                                        }
                                      {
                                        {
                                          org.scalactic.Bool.binaryMacroBool(
                                            {
                                              x
                                            }
                                          , 
                                            {
                                              [32m"=="[0m
                                            }
                                          , 
                                            {
                                              x
                                            }
                                          , 
                                            {
                                              x
                                            }
                                          , 
                                            {
                                              {
                                                org.scalactic.Prettifier.default
                                              }
                                            }
                                          )
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  , 
                    {
                      {
                        [32m""[0m
                      }
                    }
                  , 
                    {
                      {
                        pos
                      }
                    }
                  )
                }:[35morg.scalatest.compatible.Assertion[0m
              }
            }
          closure($anonfun)
        }
      )
    )(
      {
        {
          org.scalactic.source.Position.apply(
            {
              [32m"ResourceSpec.scala"[0m
            }
          , 
            {
              [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
            }
          , 
            {
              [31m43[0m
            }
          )
        }:[35morg.scalactic.source.Position[0m
      }
    )
    [33mthis[0m.test(
      [32m"Simple resources should return their proper string representation"[0m
    , 
      scala.runtime.ScalaRunTime.wrapRefArray[[35morg.scalatest.Tag[0m](
        [ : [35morg.scalatest.Tag[0m]
      )
    )(
      <special-ops>.<cbn-arg>[[35morg.scalatest.compatible.Assertion[0m](
        {
          [33mdef[0m [36m$anonfun[0m(): [35morg.scalatest.compatible.Assertion[0m = 
            {
              {
                [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                  {
                    {
                      org.scalactic.source.Position.apply(
                        {
                          [32m"ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [31m46[0m
                        }
                      )
                    }:[35morg.scalactic.source.Position[0m
                  }
                {
                  {
                    {
                      {
                        [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                          [36mpos[0m: [35morg.scalactic.source.Position[0m
                        ): [35morg.scalatest.compatible.Assertion[0m = 
                          org.scalatest.Assertions.assertionsHelper.macroAssert(
                            bool
                          , clue, pos)
                        closure($anonfun)
                      }
                    }
                  }.apply(
                    {
                      {
                        {
                          [33mval[0m [36mx[0m: 
                            [35m
                              (genrs.Resource.ResourceOps[String]#textual : 
                                (): String
                              )
                            [0m
                           = 
                            {
                              genrs.Resource.ResourceOps[[35mString[0m]([33mthis[0m.r0)(
                                genrs.Resource.stringResource
                              ).textual
                            }
                          {
                            {
                              {
                                [33mval[0m [36mx[0m: [35m([32m"Hello World"[0m : String)[0m = 
                                  {
                                    [32m"Hello World"[0m
                                  }
                                {
                                  {
                                    {
                                      [33mval[0m [36mx[0m: [35mBoolean[0m = 
                                        {
                                          x.==(x)
                                        }
                                      {
                                        {
                                          org.scalactic.Bool.binaryMacroBool(
                                            {
                                              x
                                            }
                                          , 
                                            {
                                              [32m"=="[0m
                                            }
                                          , 
                                            {
                                              x
                                            }
                                          , 
                                            {
                                              x
                                            }
                                          , 
                                            {
                                              {
                                                org.scalactic.Prettifier.default
                                              }
                                            }
                                          )
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  , 
                    {
                      {
                        [32m""[0m
                      }
                    }
                  , 
                    {
                      {
                        pos
                      }
                    }
                  )
                }:[35morg.scalatest.compatible.Assertion[0m
              }
              {
                [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                  {
                    {
                      org.scalactic.source.Position.apply(
                        {
                          [32m"ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [31m47[0m
                        }
                      )
                    }:[35morg.scalactic.source.Position[0m
                  }
                {
                  {
                    {
                      {
                        [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                          [36mpos[0m: [35morg.scalactic.source.Position[0m
                        ): [35morg.scalatest.compatible.Assertion[0m = 
                          org.scalatest.Assertions.assertionsHelper.macroAssert(
                            bool
                          , clue, pos)
                        closure($anonfun)
                      }
                    }
                  }.apply(
                    {
                      {
                        {
                          [33mval[0m [36mx[0m: 
                            [35m
                              (genrs.Resource.ResourceOps[Int]#textual : 
                                (): String
                              )
                            [0m
                           = 
                            {
                              genrs.Resource.ResourceOps[[35mInt[0m]([33mthis[0m.r1)(
                                genrs.Resource.intResource
                              ).textual
                            }
                          {
                            {
                              {
                                [33mval[0m [36mx[0m: [35m([32m"-12"[0m : String)[0m = 
                                  {
                                    [32m"-12"[0m
                                  }
                                {
                                  {
                                    {
                                      [33mval[0m [36mx[0m: [35mBoolean[0m = 
                                        {
                                          x.==(x)
                                        }
                                      {
                                        {
                                          org.scalactic.Bool.binaryMacroBool(
                                            {
                                              x
                                            }
                                          , 
                                            {
                                              [32m"=="[0m
                                            }
                                          , 
                                            {
                                              x
                                            }
                                          , 
                                            {
                                              x
                                            }
                                          , 
                                            {
                                              {
                                                org.scalactic.Prettifier.default
                                              }
                                            }
                                          )
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  , 
                    {
                      {
                        [32m""[0m
                      }
                    }
                  , 
                    {
                      {
                        pos
                      }
                    }
                  )
                }:[35morg.scalatest.compatible.Assertion[0m
              }
              {
                [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                  {
                    {
                      org.scalactic.source.Position.apply(
                        {
                          [32m"ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [31m48[0m
                        }
                      )
                    }:[35morg.scalactic.source.Position[0m
                  }
                {
                  {
                    {
                      {
                        [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                          [36mpos[0m: [35morg.scalactic.source.Position[0m
                        ): [35morg.scalatest.compatible.Assertion[0m = 
                          org.scalatest.Assertions.assertionsHelper.macroAssert(
                            bool
                          , clue, pos)
                        closure($anonfun)
                      }
                    }
                  }.apply(
                    {
                      {
                        {
                          [33mval[0m [36mx[0m: 
                            [35m
                              (genrs.Resource.ResourceOps[Double]#textual : 
                                (): String
                              )
                            [0m
                           = 
                            {
                              genrs.Resource.ResourceOps[[35mDouble[0m]([33mthis[0m.r2)(
                                genrs.Resource.doubleResource
                              ).textual
                            }
                          {
                            {
                              {
                                [33mval[0m [36mx[0m: [35m([32m"3.5638"[0m : String)[0m = 
                                  {
                                    [32m"3.5638"[0m
                                  }
                                {
                                  {
                                    {
                                      [33mval[0m [36mx[0m: [35mBoolean[0m = 
                                        {
                                          x.==(x)
                                        }
                                      {
                                        {
                                          org.scalactic.Bool.binaryMacroBool(
                                            {
                                              x
                                            }
                                          , 
                                            {
                                              [32m"=="[0m
                                            }
                                          , 
                                            {
                                              x
                                            }
                                          , 
                                            {
                                              x
                                            }
                                          , 
                                            {
                                              {
                                                org.scalactic.Prettifier.default
                                              }
                                            }
                                          )
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  , 
                    {
                      {
                        [32m""[0m
                      }
                    }
                  , 
                    {
                      {
                        pos
                      }
                    }
                  )
                }:[35morg.scalatest.compatible.Assertion[0m
              }
              {
                [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                  {
                    {
                      org.scalactic.source.Position.apply(
                        {
                          [32m"ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [31m49[0m
                        }
                      )
                    }:[35morg.scalactic.source.Position[0m
                  }
                {
                  {
                    {
                      {
                        [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                          [36mpos[0m: [35morg.scalactic.source.Position[0m
                        ): [35morg.scalatest.compatible.Assertion[0m = 
                          org.scalatest.Assertions.assertionsHelper.macroAssert(
                            bool
                          , clue, pos)
                        closure($anonfun)
                      }
                    }
                  }.apply(
                    {
                      {
                        {
                          [33mval[0m [36mx[0m: 
                            [35m
                              (genrs.Resource.ResourceOps[Boolean]#textual : 
                                (): String
                              )
                            [0m
                           = 
                            {
                              genrs.Resource.ResourceOps[[35mBoolean[0m]([33mthis[0m.r3)(
                                genrs.Resource.booleanResource
                              ).textual
                            }
                          {
                            {
                              {
                                [33mval[0m [36mx[0m: [35m([32m"false"[0m : String)[0m = 
                                  {
                                    [32m"false"[0m
                                  }
                                {
                                  {
                                    {
                                      [33mval[0m [36mx[0m: [35mBoolean[0m = 
                                        {
                                          x.==(x)
                                        }
                                      {
                                        {
                                          org.scalactic.Bool.binaryMacroBool(
                                            {
                                              x
                                            }
                                          , 
                                            {
                                              [32m"=="[0m
                                            }
                                          , 
                                            {
                                              x
                                            }
                                          , 
                                            {
                                              x
                                            }
                                          , 
                                            {
                                              {
                                                org.scalactic.Prettifier.default
                                              }
                                            }
                                          )
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  , 
                    {
                      {
                        [32m""[0m
                      }
                    }
                  , 
                    {
                      {
                        pos
                      }
                    }
                  )
                }:[35morg.scalatest.compatible.Assertion[0m
              }
            }
          closure($anonfun)
        }
      )
    )(
      {
        {
          org.scalactic.source.Position.apply(
            {
              [32m"ResourceSpec.scala"[0m
            }
          , 
            {
              [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
            }
          , 
            {
              [31m50[0m
            }
          )
        }:[35morg.scalactic.source.Position[0m
      }
    )
    [33mthis[0m.test(
      [32m"Context-bounded type parameters should work for all resource types"[0m
    , 
      scala.runtime.ScalaRunTime.wrapRefArray[[35morg.scalatest.Tag[0m](
        [ : [35morg.scalatest.Tag[0m]
      )
    )(
      <special-ops>.<cbn-arg>[[35morg.scalatest.compatible.Assertion[0m](
        {
          [33mdef[0m [36m$anonfun[0m(): [35morg.scalatest.compatible.Assertion[0m = 
            {
              {
                [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                  {
                    {
                      org.scalactic.source.Position.apply(
                        {
                          [32m"ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [31m53[0m
                        }
                      )
                    }:[35morg.scalactic.source.Position[0m
                  }
                {
                  {
                    {
                      {
                        [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                          [36mpos[0m: [35morg.scalactic.source.Position[0m
                        ): [35morg.scalatest.compatible.Assertion[0m = 
                          org.scalatest.Assertions.assertionsHelper.macroAssert(
                            bool
                          , clue, pos)
                        closure($anonfun)
                      }
                    }
                  }.apply(
                    {
                      {
                        org.scalactic.Bool.simpleMacroBool(
                          {
                            {
                              [33mthis[0m.genericResourceFunction[[35mString[0m]([33mthis[0m.r0)(
                                genrs.Resource.stringResource
                              )
                            }
                          }
                        , 
                          {
                            [32m
                              "ResourceSuite.this.genericResourceFunction[java.lang.String](ResourceSuite.this.r0)(genrs.Resource.stringResource)"
                            [0m
                          }
                        , 
                          {
                            {
                              org.scalactic.Prettifier.default
                            }
                          }
                        )
                      }
                    }
                  , 
                    {
                      {
                        [32m""[0m
                      }
                    }
                  , 
                    {
                      {
                        pos
                      }
                    }
                  )
                }:[35morg.scalatest.compatible.Assertion[0m
              }
              {
                [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                  {
                    {
                      org.scalactic.source.Position.apply(
                        {
                          [32m"ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [31m54[0m
                        }
                      )
                    }:[35morg.scalactic.source.Position[0m
                  }
                {
                  {
                    {
                      {
                        [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                          [36mpos[0m: [35morg.scalactic.source.Position[0m
                        ): [35morg.scalatest.compatible.Assertion[0m = 
                          org.scalatest.Assertions.assertionsHelper.macroAssert(
                            bool
                          , clue, pos)
                        closure($anonfun)
                      }
                    }
                  }.apply(
                    {
                      {
                        org.scalactic.Bool.simpleMacroBool(
                          {
                            {
                              [33mthis[0m.genericResourceFunction[[35mInt[0m]([33mthis[0m.r1)(
                                genrs.Resource.intResource
                              )
                            }
                          }
                        , 
                          {
                            [32m
                              "ResourceSuite.this.genericResourceFunction[scala.Int](ResourceSuite.this.r1)(genrs.Resource.intResource)"
                            [0m
                          }
                        , 
                          {
                            {
                              org.scalactic.Prettifier.default
                            }
                          }
                        )
                      }
                    }
                  , 
                    {
                      {
                        [32m""[0m
                      }
                    }
                  , 
                    {
                      {
                        pos
                      }
                    }
                  )
                }:[35morg.scalatest.compatible.Assertion[0m
              }
              {
                [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                  {
                    {
                      org.scalactic.source.Position.apply(
                        {
                          [32m"ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [31m55[0m
                        }
                      )
                    }:[35morg.scalactic.source.Position[0m
                  }
                {
                  {
                    {
                      {
                        [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                          [36mpos[0m: [35morg.scalactic.source.Position[0m
                        ): [35morg.scalatest.compatible.Assertion[0m = 
                          org.scalatest.Assertions.assertionsHelper.macroAssert(
                            bool
                          , clue, pos)
                        closure($anonfun)
                      }
                    }
                  }.apply(
                    {
                      {
                        org.scalactic.Bool.simpleMacroBool(
                          {
                            {
                              [33mthis[0m.genericResourceFunction[[35mDouble[0m]([33mthis[0m.r2)(
                                genrs.Resource.doubleResource
                              )
                            }
                          }
                        , 
                          {
                            [32m
                              "ResourceSuite.this.genericResourceFunction[scala.Double](ResourceSuite.this.r2)(genrs.Resource.doubleResource)"
                            [0m
                          }
                        , 
                          {
                            {
                              org.scalactic.Prettifier.default
                            }
                          }
                        )
                      }
                    }
                  , 
                    {
                      {
                        [32m""[0m
                      }
                    }
                  , 
                    {
                      {
                        pos
                      }
                    }
                  )
                }:[35morg.scalatest.compatible.Assertion[0m
              }
              {
                [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                  {
                    {
                      org.scalactic.source.Position.apply(
                        {
                          [32m"ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [31m56[0m
                        }
                      )
                    }:[35morg.scalactic.source.Position[0m
                  }
                {
                  {
                    {
                      {
                        [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                          [36mpos[0m: [35morg.scalactic.source.Position[0m
                        ): [35morg.scalatest.compatible.Assertion[0m = 
                          org.scalatest.Assertions.assertionsHelper.macroAssert(
                            bool
                          , clue, pos)
                        closure($anonfun)
                      }
                    }
                  }.apply(
                    {
                      {
                        org.scalactic.Bool.simpleMacroBool(
                          {
                            {
                              [33mthis[0m.genericResourceFunction[[35mBoolean[0m]([33mthis[0m.r3)(
                                genrs.Resource.booleanResource
                              )
                            }
                          }
                        , 
                          {
                            [32m
                              "ResourceSuite.this.genericResourceFunction[scala.Boolean](ResourceSuite.this.r3)(genrs.Resource.booleanResource)"
                            [0m
                          }
                        , 
                          {
                            {
                              org.scalactic.Prettifier.default
                            }
                          }
                        )
                      }
                    }
                  , 
                    {
                      {
                        [32m""[0m
                      }
                    }
                  , 
                    {
                      {
                        pos
                      }
                    }
                  )
                }:[35morg.scalatest.compatible.Assertion[0m
              }
            }
          closure($anonfun)
        }
      )
    )(
      {
        {
          org.scalactic.source.Position.apply(
            {
              [32m"ResourceSpec.scala"[0m
            }
          , 
            {
              [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
            }
          , 
            {
              [31m57[0m
            }
          )
        }:[35morg.scalactic.source.Position[0m
      }
    )
    [33mthis[0m.test([32m"Members of GenResource trait should typecheck as resources"[0m, 
      scala.runtime.ScalaRunTime.wrapRefArray[[35morg.scalatest.Tag[0m](
        [ : [35morg.scalatest.Tag[0m]
      )
    )(
      <special-ops>.<cbn-arg>[[35morg.scalatest.compatible.Assertion[0m](
        {
          [33mdef[0m [36m$anonfun[0m(): [35morg.scalatest.compatible.Assertion[0m = 
            {
              {
                [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                  {
                    {
                      org.scalactic.source.Position.apply(
                        {
                          [32m"ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [31m60[0m
                        }
                      )
                    }:[35morg.scalactic.source.Position[0m
                  }
                {
                  {
                    {
                      {
                        [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                          [36mpos[0m: [35morg.scalactic.source.Position[0m
                        ): [35morg.scalatest.compatible.Assertion[0m = 
                          org.scalatest.Assertions.assertionsHelper.macroAssert(
                            bool
                          , clue, pos)
                        closure($anonfun)
                      }
                    }
                  }.apply(
                    {
                      {
                        org.scalactic.Bool.simpleMacroBool(
                          {
                            {
                              [33mthis[0m.genericResourceFunction[
                                [35mResourceSuite.this.StrangeResource$[0m
                              ]([33mthis[0m.StrangeResource)(
                                genrs.Resource.genResource[
                                  [35mResourceSuite.this.StrangeResource$[0m
                                ]
                              )
                            }
                          }
                        , 
                          {
                            [32m
                              "ResourceSuite.this.genericResourceFunction[ResourceSuite.this.StrangeResource.type](ResourceSuite.this.StrangeResource)(genrs.Resource.genResource[ResourceSuite.this.StrangeResource.type])"
                            [0m
                          }
                        , 
                          {
                            {
                              org.scalactic.Prettifier.default
                            }
                          }
                        )
                      }
                    }
                  , 
                    {
                      {
                        [32m""[0m
                      }
                    }
                  , 
                    {
                      {
                        pos
                      }
                    }
                  )
                }:[35morg.scalatest.compatible.Assertion[0m
              }
            }
          closure($anonfun)
        }
      )
    )(
      {
        {
          org.scalactic.source.Position.apply(
            {
              [32m"ResourceSpec.scala"[0m
            }
          , 
            {
              [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
            }
          , 
            {
              [31m61[0m
            }
          )
        }:[35morg.scalactic.source.Position[0m
      }
    )
    [33mthis[0m.test([32m"Lists of any resource type should typecheck as resources"[0m, 
      scala.runtime.ScalaRunTime.wrapRefArray[[35morg.scalatest.Tag[0m](
        [ : [35morg.scalatest.Tag[0m]
      )
    )(
      <special-ops>.<cbn-arg>[[35morg.scalatest.compatible.Assertion[0m](
        {
          [33mdef[0m [36m$anonfun[0m(): [35morg.scalatest.compatible.Assertion[0m = 
            {
              {
                [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                  {
                    {
                      org.scalactic.source.Position.apply(
                        {
                          [32m"ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [31m64[0m
                        }
                      )
                    }:[35morg.scalactic.source.Position[0m
                  }
                {
                  {
                    {
                      {
                        [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                          [36mpos[0m: [35morg.scalactic.source.Position[0m
                        ): [35morg.scalatest.compatible.Assertion[0m = 
                          org.scalatest.Assertions.assertionsHelper.macroAssert(
                            bool
                          , clue, pos)
                        closure($anonfun)
                      }
                    }
                  }.apply(
                    {
                      {
                        org.scalactic.Bool.simpleMacroBool(
                          {
                            {
                              [33mthis[0m.genericResourceFunction[
                                [35mscala.collection.immutable.List[String][0m
                              ]([33mthis[0m.l0)(
                                genrs.Resource.listResource[[35mString[0m](
                                  genrs.Resource.stringResource
                                )
                              )
                            }
                          }
                        , 
                          {
                            [32m
                              "ResourceSuite.this.genericResourceFunction[scala.collection.immutable.List[java.lang.String]](ResourceSuite.this.l0)(genrs.Resource.listResource[java.lang.String](genrs.Resource.stringResource))"
                            [0m
                          }
                        , 
                          {
                            {
                              org.scalactic.Prettifier.default
                            }
                          }
                        )
                      }
                    }
                  , 
                    {
                      {
                        [32m""[0m
                      }
                    }
                  , 
                    {
                      {
                        pos
                      }
                    }
                  )
                }:[35morg.scalatest.compatible.Assertion[0m
              }
              {
                [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                  {
                    {
                      org.scalactic.source.Position.apply(
                        {
                          [32m"ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [31m65[0m
                        }
                      )
                    }:[35morg.scalactic.source.Position[0m
                  }
                {
                  {
                    {
                      {
                        [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                          [36mpos[0m: [35morg.scalactic.source.Position[0m
                        ): [35morg.scalatest.compatible.Assertion[0m = 
                          org.scalatest.Assertions.assertionsHelper.macroAssert(
                            bool
                          , clue, pos)
                        closure($anonfun)
                      }
                    }
                  }.apply(
                    {
                      {
                        org.scalactic.Bool.simpleMacroBool(
                          {
                            {
                              [33mthis[0m.genericResourceFunction[
                                [35mscala.collection.immutable.List[Double][0m
                              ]([33mthis[0m.l1)(
                                genrs.Resource.listResource[[35mDouble[0m](
                                  genrs.Resource.doubleResource
                                )
                              )
                            }
                          }
                        , 
                          {
                            [32m
                              "ResourceSuite.this.genericResourceFunction[scala.collection.immutable.List[scala.Double]](ResourceSuite.this.l1)(genrs.Resource.listResource[scala.Double](genrs.Resource.doubleResource))"
                            [0m
                          }
                        , 
                          {
                            {
                              org.scalactic.Prettifier.default
                            }
                          }
                        )
                      }
                    }
                  , 
                    {
                      {
                        [32m""[0m
                      }
                    }
                  , 
                    {
                      {
                        pos
                      }
                    }
                  )
                }:[35morg.scalatest.compatible.Assertion[0m
              }
              {
                [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                  {
                    {
                      org.scalactic.source.Position.apply(
                        {
                          [32m"ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [31m66[0m
                        }
                      )
                    }:[35morg.scalactic.source.Position[0m
                  }
                {
                  {
                    {
                      {
                        [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                          [36mpos[0m: [35morg.scalactic.source.Position[0m
                        ): [35morg.scalatest.compatible.Assertion[0m = 
                          org.scalatest.Assertions.assertionsHelper.macroAssert(
                            bool
                          , clue, pos)
                        closure($anonfun)
                      }
                    }
                  }.apply(
                    {
                      {
                        org.scalactic.Bool.simpleMacroBool(
                          {
                            {
                              [33mthis[0m.genericResourceFunction[
                                [35m
                                  scala.collection.immutable.List[
                                    scala.collection.immutable.List[Double]
                                  ]
                                [0m
                              ]([33mthis[0m.l2)(
                                genrs.Resource.listResource[
                                  [35mscala.collection.immutable.List[Double][0m
                                ](
                                  genrs.Resource.listResource[[35mDouble[0m](
                                    genrs.Resource.doubleResource
                                  )
                                )
                              )
                            }
                          }
                        , 
                          {
                            [32m
                              "ResourceSuite.this.genericResourceFunction[scala.collection.immutable.List[scala.collection.immutable.List[scala.Double]]](ResourceSuite.this.l2)(genrs.Resource.listResource[scala.collection.immutable.List[scala.Double]](genrs.Resource.listResource[scala.Double](genrs.Resource.doubleResource)))"
                            [0m
                          }
                        , 
                          {
                            {
                              org.scalactic.Prettifier.default
                            }
                          }
                        )
                      }
                    }
                  , 
                    {
                      {
                        [32m""[0m
                      }
                    }
                  , 
                    {
                      {
                        pos
                      }
                    }
                  )
                }:[35morg.scalatest.compatible.Assertion[0m
              }
            }
          closure($anonfun)
        }
      )
    )(
      {
        {
          org.scalactic.source.Position.apply(
            {
              [32m"ResourceSpec.scala"[0m
            }
          , 
            {
              [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
            }
          , 
            {
              [31m67[0m
            }
          )
        }:[35morg.scalactic.source.Position[0m
      }
    )
    [33mthis[0m.test([32m"Lists should be flagged as compound resources"[0m, 
      scala.runtime.ScalaRunTime.wrapRefArray[[35morg.scalatest.Tag[0m](
        [ : [35morg.scalatest.Tag[0m]
      )
    )(
      <special-ops>.<cbn-arg>[[35morg.scalatest.compatible.Assertion[0m](
        {
          [33mdef[0m [36m$anonfun[0m(): [35morg.scalatest.compatible.Assertion[0m = 
            {
              {
                [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                  {
                    {
                      org.scalactic.source.Position.apply(
                        {
                          [32m"ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [31m70[0m
                        }
                      )
                    }:[35morg.scalactic.source.Position[0m
                  }
                {
                  {
                    {
                      {
                        [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                          [36mpos[0m: [35morg.scalactic.source.Position[0m
                        ): [35morg.scalatest.compatible.Assertion[0m = 
                          org.scalatest.Assertions.assertionsHelper.macroAssert(
                            bool
                          , clue, pos)
                        closure($anonfun)
                      }
                    }
                  }.apply(
                    {
                      {
                        org.scalactic.Bool.simpleMacroBool(
                          {
                            {
                              genrs.Resource.ResourceOps[
                                [35mscala.collection.immutable.List[String][0m
                              ]([33mthis[0m.l0)(
                                genrs.Resource.listResource[[35mString[0m](
                                  genrs.Resource.stringResource
                                )
                              ).isCompound
                            }
                          }
                        , 
                          {
                            [32m
                              "genrs.Resource.ResourceOps[scala.collection.immutable.List[java.lang.String]](ResourceSuite.this.l0)(genrs.Resource.listResource[java.lang.String](genrs.Resource.stringResource)).isCompound"
                            [0m
                          }
                        , 
                          {
                            {
                              org.scalactic.Prettifier.default
                            }
                          }
                        )
                      }
                    }
                  , 
                    {
                      {
                        [32m""[0m
                      }
                    }
                  , 
                    {
                      {
                        pos
                      }
                    }
                  )
                }:[35morg.scalatest.compatible.Assertion[0m
              }
              {
                [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                  {
                    {
                      org.scalactic.source.Position.apply(
                        {
                          [32m"ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [31m71[0m
                        }
                      )
                    }:[35morg.scalactic.source.Position[0m
                  }
                {
                  {
                    {
                      {
                        [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                          [36mpos[0m: [35morg.scalactic.source.Position[0m
                        ): [35morg.scalatest.compatible.Assertion[0m = 
                          org.scalatest.Assertions.assertionsHelper.macroAssert(
                            bool
                          , clue, pos)
                        closure($anonfun)
                      }
                    }
                  }.apply(
                    {
                      {
                        org.scalactic.Bool.simpleMacroBool(
                          {
                            {
                              genrs.Resource.ResourceOps[
                                [35mscala.collection.immutable.List[Double][0m
                              ]([33mthis[0m.l1)(
                                genrs.Resource.listResource[[35mDouble[0m](
                                  genrs.Resource.doubleResource
                                )
                              ).isCompound
                            }
                          }
                        , 
                          {
                            [32m
                              "genrs.Resource.ResourceOps[scala.collection.immutable.List[scala.Double]](ResourceSuite.this.l1)(genrs.Resource.listResource[scala.Double](genrs.Resource.doubleResource)).isCompound"
                            [0m
                          }
                        , 
                          {
                            {
                              org.scalactic.Prettifier.default
                            }
                          }
                        )
                      }
                    }
                  , 
                    {
                      {
                        [32m""[0m
                      }
                    }
                  , 
                    {
                      {
                        pos
                      }
                    }
                  )
                }:[35morg.scalatest.compatible.Assertion[0m
              }
              {
                [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                  {
                    {
                      org.scalactic.source.Position.apply(
                        {
                          [32m"ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [31m72[0m
                        }
                      )
                    }:[35morg.scalactic.source.Position[0m
                  }
                {
                  {
                    {
                      {
                        [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                          [36mpos[0m: [35morg.scalactic.source.Position[0m
                        ): [35morg.scalatest.compatible.Assertion[0m = 
                          org.scalatest.Assertions.assertionsHelper.macroAssert(
                            bool
                          , clue, pos)
                        closure($anonfun)
                      }
                    }
                  }.apply(
                    {
                      {
                        org.scalactic.Bool.simpleMacroBool(
                          {
                            {
                              genrs.Resource.ResourceOps[
                                [35m
                                  scala.collection.immutable.List[
                                    scala.collection.immutable.List[Double]
                                  ]
                                [0m
                              ]([33mthis[0m.l2)(
                                genrs.Resource.listResource[
                                  [35mscala.collection.immutable.List[Double][0m
                                ](
                                  genrs.Resource.listResource[[35mDouble[0m](
                                    genrs.Resource.doubleResource
                                  )
                                )
                              ).isCompound
                            }
                          }
                        , 
                          {
                            [32m
                              "genrs.Resource.ResourceOps[scala.collection.immutable.List[scala.collection.immutable.List[scala.Double]]](ResourceSuite.this.l2)(genrs.Resource.listResource[scala.collection.immutable.List[scala.Double]](genrs.Resource.listResource[scala.Double](genrs.Resource.doubleResource))).isCompound"
                            [0m
                          }
                        , 
                          {
                            {
                              org.scalactic.Prettifier.default
                            }
                          }
                        )
                      }
                    }
                  , 
                    {
                      {
                        [32m""[0m
                      }
                    }
                  , 
                    {
                      {
                        pos
                      }
                    }
                  )
                }:[35morg.scalatest.compatible.Assertion[0m
              }
            }
          closure($anonfun)
        }
      )
    )(
      {
        {
          org.scalactic.source.Position.apply(
            {
              [32m"ResourceSpec.scala"[0m
            }
          , 
            {
              [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
            }
          , 
            {
              [31m73[0m
            }
          )
        }:[35morg.scalactic.source.Position[0m
      }
    )
    [33mthis[0m.test([32m"KVObjectResource should typecheck as resource"[0m, 
      scala.runtime.ScalaRunTime.wrapRefArray[[35morg.scalatest.Tag[0m](
        [ : [35morg.scalatest.Tag[0m]
      )
    )(
      <special-ops>.<cbn-arg>[[35morg.scalatest.compatible.Assertion[0m](
        {
          [33mdef[0m [36m$anonfun[0m(): [35morg.scalatest.compatible.Assertion[0m = 
            {
              {
                [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                  {
                    {
                      org.scalactic.source.Position.apply(
                        {
                          [32m"ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [31m76[0m
                        }
                      )
                    }:[35morg.scalactic.source.Position[0m
                  }
                {
                  {
                    {
                      {
                        [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                          [36mpos[0m: [35morg.scalactic.source.Position[0m
                        ): [35morg.scalatest.compatible.Assertion[0m = 
                          org.scalatest.Assertions.assertionsHelper.macroAssert(
                            bool
                          , clue, pos)
                        closure($anonfun)
                      }
                    }
                  }.apply(
                    {
                      {
                        org.scalactic.Bool.simpleMacroBool(
                          {
                            {
                              [33mthis[0m.genericResourceFunction[
                                [35mgenrs.KVObjectResource[0m
                              ]([33mthis[0m.kvObject0)(
                                genrs.Resource.genResource[
                                  [35mgenrs.KVObjectResource[0m
                                ]
                              )
                            }
                          }
                        , 
                          {
                            [32m
                              "ResourceSuite.this.genericResourceFunction[genrs.KVObjectResource](ResourceSuite.this.kvObject0)(genrs.Resource.genResource[genrs.KVObjectResource])"
                            [0m
                          }
                        , 
                          {
                            {
                              org.scalactic.Prettifier.default
                            }
                          }
                        )
                      }
                    }
                  , 
                    {
                      {
                        [32m""[0m
                      }
                    }
                  , 
                    {
                      {
                        pos
                      }
                    }
                  )
                }:[35morg.scalatest.compatible.Assertion[0m
              }
            }
          closure($anonfun)
        }
      )
    )(
      {
        {
          org.scalactic.source.Position.apply(
            {
              [32m"ResourceSpec.scala"[0m
            }
          , 
            {
              [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
            }
          , 
            {
              [31m77[0m
            }
          )
        }:[35morg.scalactic.source.Position[0m
      }
    )
    [33mthis[0m.test([32m"KVObjectResource should allow typed lookup"[0m, 
      scala.runtime.ScalaRunTime.wrapRefArray[[35morg.scalatest.Tag[0m](
        [ : [35morg.scalatest.Tag[0m]
      )
    )(
      <special-ops>.<cbn-arg>[[35morg.scalatest.compatible.Assertion[0m](
        {
          [33mdef[0m [36m$anonfun[0m(): [35morg.scalatest.compatible.Assertion[0m = 
            {
              [33mval[0m [36mname[0m: [35mString[0m = 
                [33mthis[0m.kvObject0.apply[[35mString[0m]([32m"name"[0m)(
                  genrs.Resource.stringResource
                )
              {
                [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                  {
                    {
                      org.scalactic.source.Position.apply(
                        {
                          [32m"ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [31m81[0m
                        }
                      )
                    }:[35morg.scalactic.source.Position[0m
                  }
                {
                  {
                    {
                      {
                        [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                          [36mpos[0m: [35morg.scalactic.source.Position[0m
                        ): [35morg.scalatest.compatible.Assertion[0m = 
                          org.scalatest.Assertions.assertionsHelper.macroAssert(
                            bool
                          , clue, pos)
                        closure($anonfun)
                      }
                    }
                  }.apply(
                    {
                      {
                        {
                          [33mval[0m [36mx[0m: 
                            [35m
                              (genrs.Resource.ResourceOps[String]#rtype : 
                                (): String
                              )
                            [0m
                           = 
                            {
                              genrs.Resource.ResourceOps[[35mString[0m](name)(
                                genrs.Resource.stringResource
                              ).rtype
                            }
                          {
                            {
                              {
                                [33mval[0m [36mx[0m: [35m([32m"string"[0m : String)[0m = 
                                  {
                                    [32m"string"[0m
                                  }
                                {
                                  {
                                    {
                                      [33mval[0m [36mx[0m: [35mBoolean[0m = 
                                        {
                                          x.==(x)
                                        }
                                      {
                                        {
                                          org.scalactic.Bool.binaryMacroBool(
                                            {
                                              x
                                            }
                                          , 
                                            {
                                              [32m"=="[0m
                                            }
                                          , 
                                            {
                                              x
                                            }
                                          , 
                                            {
                                              x
                                            }
                                          , 
                                            {
                                              {
                                                org.scalactic.Prettifier.default
                                              }
                                            }
                                          )
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  , 
                    {
                      {
                        [32m""[0m
                      }
                    }
                  , 
                    {
                      {
                        pos
                      }
                    }
                  )
                }:[35morg.scalatest.compatible.Assertion[0m
              }
            }
          closure($anonfun)
        }
      )
    )(
      {
        {
          org.scalactic.source.Position.apply(
            {
              [32m"ResourceSpec.scala"[0m
            }
          , 
            {
              [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
            }
          , 
            {
              [31m82[0m
            }
          )
        }:[35morg.scalactic.source.Position[0m
      }
    )
    [33mthis[0m.test([32m"KVObjectResource should allow untyped lookup"[0m, 
      scala.runtime.ScalaRunTime.wrapRefArray[[35morg.scalatest.Tag[0m](
        [ : [35morg.scalatest.Tag[0m]
      )
    )(
      <special-ops>.<cbn-arg>[[35morg.scalatest.compatible.Assertion[0m](
        {
          [33mdef[0m [36m$anonfun[0m(): [35morg.scalatest.compatible.Assertion[0m = 
            {
              [33mval[0m [36mname[0m: [35mgenrs.ResourceWrapper[?][0m = 
                [33mthis[0m.kvObject0.kv.apply([32m"name"[0m)
              {
                [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                  {
                    {
                      org.scalactic.source.Position.apply(
                        {
                          [32m"ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [31m86[0m
                        }
                      )
                    }:[35morg.scalactic.source.Position[0m
                  }
                {
                  {
                    {
                      {
                        [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                          [36mpos[0m: [35morg.scalactic.source.Position[0m
                        ): [35morg.scalatest.compatible.Assertion[0m = 
                          org.scalatest.Assertions.assertionsHelper.macroAssert(
                            bool
                          , clue, pos)
                        closure($anonfun)
                      }
                    }
                  }.apply(
                    {
                      {
                        {
                          [33mval[0m [36mx[0m: [35m(name.rtype : (): String)[0m = 
                            {
                              name.rtype
                            }
                          {
                            {
                              {
                                [33mval[0m [36mx[0m: [35m([32m"string"[0m : String)[0m = 
                                  {
                                    [32m"string"[0m
                                  }
                                {
                                  {
                                    {
                                      [33mval[0m [36mx[0m: [35mBoolean[0m = 
                                        {
                                          x.==(x)
                                        }
                                      {
                                        {
                                          org.scalactic.Bool.binaryMacroBool(
                                            {
                                              x
                                            }
                                          , 
                                            {
                                              [32m"=="[0m
                                            }
                                          , 
                                            {
                                              x
                                            }
                                          , 
                                            {
                                              x
                                            }
                                          , 
                                            {
                                              {
                                                org.scalactic.Prettifier.default
                                              }
                                            }
                                          )
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  , 
                    {
                      {
                        [32m""[0m
                      }
                    }
                  , 
                    {
                      {
                        pos
                      }
                    }
                  )
                }:[35morg.scalatest.compatible.Assertion[0m
              }
              {
                [33mval[0m [36mpos[0m: [35morg.scalactic.source.Position[0m = 
                  {
                    {
                      org.scalactic.source.Position.apply(
                        {
                          [32m"ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
                        }
                      , 
                        {
                          [31m87[0m
                        }
                      )
                    }:[35morg.scalactic.source.Position[0m
                  }
                {
                  {
                    {
                      {
                        [33mdef[0m [36m$anonfun[0m([36mbool[0m: [35morg.scalactic.Bool[0m, [36mclue[0m: [35mAny[0m, 
                          [36mpos[0m: [35morg.scalactic.source.Position[0m
                        ): [35morg.scalatest.compatible.Assertion[0m = 
                          org.scalatest.Assertions.assertionsHelper.macroAssert(
                            bool
                          , clue, pos)
                        closure($anonfun)
                      }
                    }
                  }.apply(
                    {
                      {
                        {
                          [33mval[0m [36mx[0m: [35m(name : genrs.ResourceWrapper)[0m = 
                            {
                              name
                            }
                          {
                            {
                              org.scalactic.Bool.isInstanceOfMacroBool(
                                {
                                  x
                                }
                              , [32m"isInstanceOf"[0m, 
                                {
                                  [32m"genrs.ResourceWrapper[scala.Predef.String]"[0m
                                }
                              , 
                                {
                                  x.isInstanceOf[[35mgenrs.ResourceWrapper[String][0m]
                                }
                              , 
                                {
                                  {
                                    org.scalactic.Prettifier.default
                                  }
                                }
                              )
                            }
                          }
                        }
                      }
                    }
                  , 
                    {
                      {
                        [32m""[0m
                      }
                    }
                  , 
                    {
                      {
                        pos
                      }
                    }
                  )
                }:[35morg.scalatest.compatible.Assertion[0m
              }
            }
          closure($anonfun)
        }
      )
    )(
      {
        {
          org.scalactic.source.Position.apply(
            {
              [32m"ResourceSpec.scala"[0m
            }
          , 
            {
              [32m"/d/Code/genrs/src/test/ResourceSpec.scala"[0m
            }
          , 
            {
              [31m88[0m
            }
          )
        }:[35morg.scalactic.source.Position[0m
      }
    )
  }
} of class class dotty.tools.dotc.ast.Trees$PackageDef # 23815
[info] exception occurred while compiling /d/Code/genrs/src/test/ResourceSpec.scala
java.nio.file.NoSuchFileException: /home/cheeseng/git/scalatest-upstream/scalactic.dotty/src/main/scala/org/scalactic/BooleanMacro.scala while compiling /d/Code/genrs/src/test/ResourceSpec.scala
[error] ## Exception when compiling 1 sources to /d/Code/genrs/target/scala-0.22/test-classes
[error] java.nio.file.NoSuchFileException: /home/cheeseng/git/scalatest-upstream/scalactic.dotty/src/main/scala/org/scalactic/BooleanMacro.scala
[error] sun.nio.fs.UnixException.translateToIOException(UnixException.java:86)
[error] sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102)
[error] sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107)
[error] sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:214)
[error] java.nio.file.Files.newByteChannel(Files.java:361)
[error] java.nio.file.Files.newByteChannel(Files.java:407)
[error] java.nio.file.spi.FileSystemProvider.newInputStream(FileSystemProvider.java:384)
[error] java.nio.file.Files.newInputStream(Files.java:152)
[error] dotty.tools.io.File.inputStream(File.scala:51)
[error] dotty.tools.io.PlainFile.input(PlainFile.scala:44)
[error] dotty.tools.io.AbstractFile.toByteArray(AbstractFile.scala:170)
[error] dotty.tools.dotc.util.SourceFile.SourceFile$superArg$1$$anonfun$1(SourceFile.scala:51)
[error] dotty.tools.dotc.util.SourceFile.content(SourceFile.scala:47)
[error] dotty.tools.dotc.util.SourceFile.lineIndices(SourceFile.scala:110)
[error] dotty.tools.dotc.util.SourceFile.offsetToLine(SourceFile.scala:129)
[error] dotty.tools.dotc.util.SourcePosition.line(SourcePosition.scala:25)
[error] xsbt.DelegatingReporter$2.line(DelegatingReporter.java:91)
[error] sbt.internal.server.LanguageServerReporter.$anonfun$toDiagnostics$2(LanguageServerReporter.scala:109)
[error] scala.collection.TraversableLike.$anonfun$flatMap$1(TraversableLike.scala:245)
[error] scala.collection.Iterator.foreach(Iterator.scala:941)
[error] scala.collection.Iterator.foreach$(Iterator.scala:941)
[error] scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
[error] scala.collection.IterableLike.foreach(IterableLike.scala:74)
[error] scala.collection.IterableLike.foreach$(IterableLike.scala:73)
[error] scala.collection.AbstractIterable.foreach(Iterable.scala:56)
[error] scala.collection.TraversableLike.flatMap(TraversableLike.scala:245)
[error] scala.collection.TraversableLike.flatMap$(TraversableLike.scala:242)
[error] scala.collection.AbstractTraversable.flatMap(Traversable.scala:108)
[error] sbt.internal.server.LanguageServerReporter.toDiagnostics(LanguageServerReporter.scala:107)
[error] sbt.internal.server.LanguageServerReporter.$anonfun$aggregateProblems$1(LanguageServerReporter.scala:97)
[error] sbt.internal.server.LanguageServerReporter.$anonfun$aggregateProblems$1$adapted(LanguageServerReporter.scala:94)
[error] scala.Option.foreach(Option.scala:407)
[error] sbt.internal.server.LanguageServerReporter.aggregateProblems(LanguageServerReporter.scala:94)
[error] sbt.internal.server.LanguageServerReporter.logWarning(LanguageServerReporter.scala:69)
[error] sbt.internal.inc.LoggedReporter.display(LoggedReporter.scala:168)
[error] sbt.internal.inc.LoggedReporter.log(LoggedReporter.scala:142)
[error] sbt.internal.server.LanguageServerReporter.log(LanguageServerReporter.scala:58)
[error] xsbt.DelegatingReporter.doReport(DelegatingReporter.java:135)
[error] dotty.tools.dotc.reporting.Reporter.report(Reporter.scala:272)
[error] dotty.tools.dotc.reporting.Reporting.reportWarning(Reporter.scala:88)
[error] dotty.tools.dotc.core.Contexts$Context.reportWarning(Contexts.scala:75)
[error] dotty.tools.dotc.reporting.Reporting.warning(Reporter.scala:124)
[error] dotty.tools.dotc.core.Contexts$Context.warning(Contexts.scala:75)
[error] dotty.tools.dotc.transform.TypeTestsCasts$.interceptWith$2(TypeTestsCasts.scala:303)
[error] dotty.tools.dotc.transform.TypeTestsCasts$.op$1(TypeTestsCasts.scala:318)
[error] dotty.tools.dotc.transform.TypeTestsCasts$.interceptTypeApply(TypeTestsCasts.scala:319)
[error] dotty.tools.dotc.transform.Erasure$Typer.typedTypeApply(Erasure.scala:526)
[error] dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:2169)
[error] dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2209)
[error] dotty.tools.dotc.typer.ReTyper.typedUnadapted(ReTyper.scala:123)
[error] dotty.tools.dotc.typer.Typer.op$1(Typer.scala:2247)
[error] dotty.tools.dotc.typer.Typer.typed(Typer.scala:2256)
[error] dotty.tools.dotc.typer.Typer.typed(Typer.scala:2259)
[error] dotty.tools.dotc.typer.Typer.typedInlined(Typer.scala:1361)
[error] dotty.tools.dotc.transform.Erasure$Typer.typedInlined(Erasure.scala:595)
[error] dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:2172)
[error] dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2209)
[error] dotty.tools.dotc.typer.ReTyper.typedUnadapted(ReTyper.scala:123)
[error] dotty.tools.dotc.typer.Typer.op$1(Typer.scala:2247)
[error] dotty.tools.dotc.typer.Typer.typed(Typer.scala:2256)
[error] dotty.tools.dotc.typer.Typer.typed(Typer.scala:2259)
[error] dotty.tools.dotc.typer.Typer.typedExpr(Typer.scala:2367)
[error] dotty.tools.dotc.transform.Erasure$Typer.$anonfun$5(Erasure.scala:564)
[error] dotty.tools.dotc.core.Decorators$ListDecorator$.zipWithConserve$extension(Decorators.scala:110)
[error] dotty.tools.dotc.core.Decorators$ListDecorator$.zipWithConserve$extension(Decorators.scala:111)
[error] dotty.tools.dotc.core.Decorators$ListDecorator$.zipWithConserve$extension(Decorators.scala:111)
[error] dotty.tools.dotc.core.Decorators$ListDecorator$.zipWithConserve$extension(Decorators.scala:111)
[error] dotty.tools.dotc.transform.Erasure$Typer.typedApply(Erasure.scala:564)
[error] dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:2151)
[error] dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2209)
[error] dotty.tools.dotc.typer.ReTyper.typedUnadapted(ReTyper.scala:123)
[error] dotty.tools.dotc.typer.Typer.op$1(Typer.scala:2247)
[error] dotty.tools.dotc.typer.Typer.typed(Typer.scala:2256)
[error] dotty.tools.dotc.typer.Typer.op$1(Typer.scala:2243)
[error] dotty.tools.dotc.typer.Typer.typed(Typer.scala:2256)
[error] dotty.tools.dotc.typer.Typer.typed(Typer.scala:2259)
[error] dotty.tools.dotc.typer.Typer.typedInlined(Typer.scala:1361)
[error] dotty.tools.dotc.transform.Erasure$Typer.typedInlined(Erasure.scala:595)
[error] dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:2172)
[error] dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2209)
[error] dotty.tools.dotc.typer.ReTyper.typedUnadapted(ReTyper.scala:123)
[error] dotty.tools.dotc.typer.Typer.op$1(Typer.scala:2247)
[error] dotty.tools.dotc.typer.Typer.typed(Typer.scala:2256)
[error] dotty.tools.dotc.typer.Typer.typed(Typer.scala:2259)
[error] dotty.tools.dotc.typer.Typer.typedInlined(Typer.scala:1361)
[error] dotty.tools.dotc.transform.Erasure$Typer.typedInlined(Erasure.scala:595)
[error] dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:2172)
[error] dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2209)
[error] dotty.tools.dotc.typer.ReTyper.typedUnadapted(ReTyper.scala:123)
[error] dotty.tools.dotc.typer.Typer.op$1(Typer.scala:2247)
[error] dotty.tools.dotc.typer.Typer.typed(Typer.scala:2256)
[error] dotty.tools.dotc.typer.Typer.typed(Typer.scala:2259)
[error] dotty.tools.dotc.typer.Typer.typedExpr(Typer.scala:2367)
[error] dotty.tools.dotc.typer.Typer.typedBlock(Typer.scala:801)
[error] dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:2159)
[error] dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2209)
[error] dotty.tools.dotc.typer.ReTyper.typedUnadapted(ReTyper.scala:123)
[error] dotty.tools.dotc.typer.Typer.op$1(Typer.scala:2247)
[error] dotty.tools.dotc.typer.Typer.typed(Typer.scala:2256)
[error] dotty.tools.dotc.typer.Typer.op$1(Typer.scala:2243)
[error] dotty.tools.dotc.typer.Typer.typed(Typer.scala:2256)
[error] dotty.tools.dotc.typer.Typer.typed(Typer.scala:2259)
[error] dotty.tools.dotc.typer.Typer.typedInlined(Typer.scala:1361)
[error] dotty.tools.dotc.transform.Erasure$Typer.typedInlined(Erasure.scala:595)
[error] dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:2172)
[error] dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2209)
[error] dotty.tools.dotc.typer.ReTyper.typedUnadapted(ReTyper.scala:123)
[error] dotty.tools.dotc.typer.Typer.op$1(Typer.scala:2247)
[error] dotty.tools.dotc.typer.Typer.typed(Typer.scala:2256)
[error] dotty.tools.dotc.typer.Typer.typed(Typer.scala:2259)
[error] dotty.tools.dotc.typer.Typer.typedInlined(Typer.scala:1361)
[error] dotty.tools.dotc.transform.Erasure$Typer.typedInlined(Erasure.scala:595)
[error] dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:2172)
[error] dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2209)
[error] dotty.tools.dotc.typer.ReTyper.typedUnadapted(ReTyper.scala:123)
[error] dotty.tools.dotc.typer.Typer.op$1(Typer.scala:2247)
[error] dotty.tools.dotc.typer.Typer.typed(Typer.scala:2256)
[error] dotty.tools.dotc.typer.Typer.typed(Typer.scala:2259)
[error] dotty.tools.dotc.typer.Typer.typedExpr(Typer.scala:2367)
[error] dotty.tools.dotc.transform.Erasure$Typer.$anonfun$5(Erasure.scala:564)
[error] dotty.tools.dotc.core.Decorators$ListDecorator$.zipWithConserve$extension(Decorators.scala:110)
[error] dotty.tools.dotc.transform.Erasure$Typer.typedApply(Erasure.scala:564)
[error] dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:2151)
[error] dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2209)
[error] dotty.tools.dotc.typer.ReTyper.typedUnadapted(ReTyper.scala:123)
[error] dotty.tools.dotc.typer.Typer.op$1(Typer.scala:2247)
[error] dotty.tools.dotc.typer.Typer.typed(Typer.scala:2256)
[error] dotty.tools.dotc.typer.Typer.typed(Typer.scala:2259)
[error] dotty.tools.dotc.typer.Typer.typedInlined(Typer.scala:1361)
[error] dotty.tools.dotc.transform.Erasure$Typer.typedInlined(Erasure.scala:595)
[error] dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:2172)
[error] dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2209)
[error] dotty.tools.dotc.typer.ReTyper.typedUnadapted(ReTyper.scala:123)
[error] dotty.tools.dotc.typer.Typer.op$1(Typer.scala:2247)
[error] dotty.tools.dotc.typer.Typer.typed(Typer.scala:2256)
[error] dotty.tools.dotc.typer.Typer.op$1(Typer.scala:2243)
[error] dotty.tools.dotc.typer.Typer.typed(Typer.scala:2256)
[error] dotty.tools.dotc.typer.Typer.typed(Typer.scala:2259)
[error] dotty.tools.dotc.transform.Erasure$Typer.typedTyped(Erasure.scala:393)
[error] dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:2156)
[error] dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2209)
[error] dotty.tools.dotc.typer.ReTyper.typedUnadapted(ReTyper.scala:123)
[error] dotty.tools.dotc.typer.Typer.op$1(Typer.scala:2247)
[error] dotty.tools.dotc.typer.Typer.typed(Typer.scala:2256)
[error] dotty.tools.dotc.typer.Typer.op$1(Typer.scala:2243)
[error] dotty.tools.dotc.typer.Typer.typed(Typer.scala:2256)
[error] dotty.tools.dotc.typer.Typer.typed(Typer.scala:2259)
[error] dotty.tools.dotc.typer.Typer.typedInlined(Typer.scala:1361)
[error] dotty.tools.dotc.transform.Erasure$Typer.typedInlined(Erasure.scala:595)
[error] dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:2172)
[error] dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2209)
[error] dotty.tools.dotc.typer.ReTyper.typedUnadapted(ReTyper.scala:123)
[error] dotty.tools.dotc.typer.Typer.op$1(Typer.scala:2247)
[error] dotty.tools.dotc.typer.Typer.typed(Typer.scala:2256)
[error] dotty.tools.dotc.typer.Typer.typed(Typer.scala:2259)
[error] dotty.tools.dotc.typer.Typer.typedExpr(Typer.scala:2367)
[error] dotty.tools.dotc.typer.Typer.typedBlock(Typer.scala:801)
[error] dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:2159)
[error] dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2209)
[error] dotty.tools.dotc.typer.ReTyper.typedUnadapted(ReTyper.scala:123)
[error] dotty.tools.dotc.typer.Typer.op$1(Typer.scala:2247)
[error] dotty.tools.dotc.typer.Typer.typed(Typer.scala:2256)
[error] dotty.tools.dotc.typer.Typer.typed(Typer.scala:2259)
[error] dotty.tools.dotc.typer.Typer.typedExpr(Typer.scala:2367)
[error] dotty.tools.dotc.typer.Typer.typedDefDef(Typer.scala:1679)
[error] dotty.tools.dotc.transform.Erasure$Typer.typedDefDef(Erasure.scala:635)
[error] dotty.tools.dotc.typer.Typer.typedNamed$1(Typer.scala:2138)
[error] dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2208)
[error] dotty.tools.dotc.typer.ReTyper.typedUnadapted(ReTyper.scala:123)
[error] dotty.tools.dotc.typer.Typer.op$1(Typer.scala:2247)
[error] dotty.tools.dotc.typer.Typer.typed(Typer.scala:2256)
[error] dotty.tools.dotc.typer.Typer.typed(Typer.scala:2259)
[error] dotty.tools.dotc.typer.Typer.traverse$1(Typer.scala:2281)
[error] dotty.tools.dotc.typer.Typer.typedStats(Typer.scala:2325)
[error] dotty.tools.dotc.transform.Erasure$Typer.typedStats(Erasure.scala:747)
[error] dotty.tools.dotc.typer.Typer.typedBlockStats(Typer.scala:796)
[error] dotty.tools.dotc.typer.Typer.typedBlock(Typer.scala:800)
[error] dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:2159)
[error] dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2209)
[error] dotty.tools.dotc.typer.ReTyper.typedUnadapted(ReTyper.scala:123)
[error] dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2112)
[error] dotty.tools.dotc.transform.Erasure$Typer.typedApply(Erasure.scala:547)
[error] dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:2151)
[error] dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2209)
[error] dotty.tools.dotc.typer.ReTyper.typedUnadapted(ReTyper.scala:123)
[error] dotty.tools.dotc.typer.Typer.op$1(Typer.scala:2247)
[error] dotty.tools.dotc.typer.Typer.typed(Typer.scala:2256)
[error] dotty.tools.dotc.typer.Typer.typed(Typer.scala:2259)
[error] dotty.tools.dotc.typer.Typer.typedExpr(Typer.scala:2367)
[error] dotty.tools.dotc.transform.Erasure$Typer.$anonfun$5(Erasure.scala:564)
[error] dotty.tools.dotc.core.Decorators$ListDecorator$.zipWithConserve$extension(Decorators.scala:110)
[error] dotty.tools.dotc.core.Decorators$ListDecorator$.zipWithConserve$extension(Decorators.scala:111)
[error] dotty.tools.dotc.core.Decorators$ListDecorator$.zipWithConserve$extension(Decorators.scala:111)
[error] dotty.tools.dotc.transform.Erasure$Typer.typedApply(Erasure.scala:564)
[error] dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:2151)
[error] dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2209)
[error] dotty.tools.dotc.typer.ReTyper.typedUnadapted(ReTyper.scala:123)
[error] dotty.tools.dotc.typer.Typer.op$1(Typer.scala:2247)
[error] dotty.tools.dotc.typer.Typer.typed(Typer.scala:2256)
[error] dotty.tools.dotc.typer.Typer.typed(Typer.scala:2259)
[error] dotty.tools.dotc.typer.Typer.typedExpr(Typer.scala:2367)
[error] dotty.tools.dotc.transform.Erasure$Typer.typedApply(Erasure.scala:548)
[error] dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:2151)
[error] dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2209)
[error] dotty.tools.dotc.typer.ReTyper.typedUnadapted(ReTyper.scala:123)
[error] dotty.tools.dotc.typer.Typer.op$1(Typer.scala:2247)
[error] dotty.tools.dotc.typer.Typer.typed(Typer.scala:2256)
[error] dotty.tools.dotc.typer.Typer.typed(Typer.scala:2259)
[error] dotty.tools.dotc.typer.Typer.typedExpr(Typer.scala:2367)
[error] dotty.tools.dotc.transform.Erasure$Typer.typedApply(Erasure.scala:548)
[error] dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:2151)
[error] dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2209)
[error] dotty.tools.dotc.typer.ReTyper.typedUnadapted(ReTyper.scala:123)
[error] dotty.tools.dotc.typer.Typer.op$1(Typer.scala:2247)
[error] dotty.tools.dotc.typer.Typer.typed(Typer.scala:2256)
[error] dotty.tools.dotc.typer.Typer.typed(Typer.scala:2259)
[error] dotty.tools.dotc.typer.Typer.traverse$1(Typer.scala:2303)
[error] dotty.tools.dotc.typer.Typer.typedStats(Typer.scala:2325)
[error] dotty.tools.dotc.transform.Erasure$Typer.typedStats(Erasure.scala:747)
[error] dotty.tools.dotc.typer.Typer.typedClassDef(Typer.scala:1812)
[error] dotty.tools.dotc.typer.Typer.typedNamed$1(Typer.scala:2141)
[error] dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2208)
[error] dotty.tools.dotc.typer.ReTyper.typedUnadapted(ReTyper.scala:123)
[error] dotty.tools.dotc.typer.Typer.op$1(Typer.scala:2247)
[error] dotty.tools.dotc.typer.Typer.typed(Typer.scala:2256)
[error] dotty.tools.dotc.typer.Typer.typed(Typer.scala:2259)
[error] dotty.tools.dotc.typer.Typer.traverse$1(Typer.scala:2281)
[error] dotty.tools.dotc.typer.Typer.typedStats(Typer.scala:2325)
[error] dotty.tools.dotc.transform.Erasure$Typer.typedStats(Erasure.scala:747)
[error] dotty.tools.dotc.typer.Typer.typedPackageDef(Typer.scala:1938)
[error] dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:2182)
[error] dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2209)
[error] dotty.tools.dotc.typer.ReTyper.typedUnadapted(ReTyper.scala:123)
[error] dotty.tools.dotc.typer.Typer.op$1(Typer.scala:2247)
[error] dotty.tools.dotc.typer.Typer.typed(Typer.scala:2256)
[error] dotty.tools.dotc.typer.Typer.typed(Typer.scala:2259)
[error] dotty.tools.dotc.typer.Typer.typedExpr(Typer.scala:2367)
[error] dotty.tools.dotc.transform.Erasure.run(Erasure.scala:100)
[error] dotty.tools.dotc.core.Phases$Phase.runOn$$anonfun$1(Phases.scala:315)
[error] scala.collection.immutable.List.map(List.scala:219)
[error] dotty.tools.dotc.core.Phases$Phase.runOn(Phases.scala:316)
[error] dotty.tools.dotc.Run.runPhases$4$$anonfun$4(Run.scala:167)
[error] dotty.runtime.function.JProcedure1.apply(JProcedure1.java:15)
[error] dotty.runtime.function.JProcedure1.apply(JProcedure1.java:10)
[error] scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1323)
[error] dotty.tools.dotc.Run.runPhases$5(Run.scala:177)
[error] dotty.tools.dotc.Run.compileUnits$$anonfun$1(Run.scala:185)
[error] dotty.runtime.function.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:12)
[error] dotty.tools.dotc.util.Stats$.maybeMonitored(Stats.scala:64)
[error] dotty.tools.dotc.Run.compileUnits(Run.scala:192)
[error] dotty.tools.dotc.Run.compileSources(Run.scala:129)
[error] dotty.tools.dotc.Run.compile(Run.scala:112)
[error] dotty.tools.dotc.Driver.doCompile(Driver.scala:36)
[error] dotty.tools.dotc.Driver.process(Driver.scala:189)
[error] dotty.tools.dotc.Main.process(Main.scala)
[error] xsbt.CachedCompilerImpl.run(CachedCompilerImpl.java:69)
[error] xsbt.CompilerInterface.run(CompilerInterface.java:41)
[error] sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[error] sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
[error] sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[error] java.lang.reflect.Method.invoke(Method.java:498)
[error] sbt.internal.inc.AnalyzingCompiler.call(AnalyzingCompiler.scala:248)
[error] sbt.internal.inc.AnalyzingCompiler.compile(AnalyzingCompiler.scala:122)
[error] sbt.internal.inc.AnalyzingCompiler.compile(AnalyzingCompiler.scala:95)
[error] sbt.internal.inc.MixedAnalyzingCompiler.$anonfun$compile$4(MixedAnalyzingCompiler.scala:91)
[error] scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
[error] sbt.internal.inc.MixedAnalyzingCompiler.timed(MixedAnalyzingCompiler.scala:186)
[error] sbt.internal.inc.MixedAnalyzingCompiler.$anonfun$compile$3(MixedAnalyzingCompiler.scala:82)
[error] sbt.internal.inc.MixedAnalyzingCompiler.$anonfun$compile$3$adapted(MixedAnalyzingCompiler.scala:77)
[error] sbt.internal.inc.JarUtils$.withPreviousJar(JarUtils.scala:215)
[error] sbt.internal.inc.MixedAnalyzingCompiler.compileScala$1(MixedAnalyzingCompiler.scala:77)
[error] sbt.internal.inc.MixedAnalyzingCompiler.compile(MixedAnalyzingCompiler.scala:146)
[error] sbt.internal.inc.IncrementalCompilerImpl.$anonfun$compileInternal$1(IncrementalCompilerImpl.scala:343)
[error] sbt.internal.inc.IncrementalCompilerImpl.$anonfun$compileInternal$1$adapted(IncrementalCompilerImpl.scala:343)
[error] sbt.internal.inc.Incremental$.doCompile(Incremental.scala:120)
[error] sbt.internal.inc.Incremental$.$anonfun$compile$4(Incremental.scala:100)
[error] sbt.internal.inc.IncrementalCommon.recompileClasses(IncrementalCommon.scala:180)
[error] sbt.internal.inc.IncrementalCommon.cycle(IncrementalCommon.scala:98)
[error] sbt.internal.inc.Incremental$.$anonfun$compile$3(Incremental.scala:102)
[error] sbt.internal.inc.Incremental$.manageClassfiles(Incremental.scala:155)
[error] sbt.internal.inc.Incremental$.compile(Incremental.scala:92)
[error] sbt.internal.inc.IncrementalCompile$.apply(Compile.scala:75)
[error] sbt.internal.inc.IncrementalCompilerImpl.compileInternal(IncrementalCompilerImpl.scala:348)
[error] sbt.internal.inc.IncrementalCompilerImpl.$anonfun$compileIncrementally$1(IncrementalCompilerImpl.scala:301)
[error] sbt.internal.inc.IncrementalCompilerImpl.handleCompilationError(IncrementalCompilerImpl.scala:168)
[error] sbt.internal.inc.IncrementalCompilerImpl.compileIncrementally(IncrementalCompilerImpl.scala:248)
[error] sbt.internal.inc.IncrementalCompilerImpl.compile(IncrementalCompilerImpl.scala:74)
[error] sbt.Defaults$.compileIncrementalTaskImpl(Defaults.scala:1762)
[error] sbt.Defaults$.$anonfun$compileIncrementalTask$1(Defaults.scala:1735)
[error] scala.Function1.$anonfun$compose$1(Function1.scala:49)
[error] sbt.internal.util.$tilde$greater.$anonfun$$u2219$1(TypeFunctions.scala:62)
[error] sbt.std.Transform$$anon$4.work(Transform.scala:67)
[error] sbt.Execute.$anonfun$submit$2(Execute.scala:281)
[error] sbt.internal.util.ErrorHandling$.wideConvert(ErrorHandling.scala:19)
[error] sbt.Execute.work(Execute.scala:290)
[error] sbt.Execute.$anonfun$submit$1(Execute.scala:281)
[error] sbt.ConcurrentRestrictions$$anon$4.$anonfun$submitValid$1(ConcurrentRestrictions.scala:178)
[error] sbt.CompletionService$$anon$2.call(CompletionService.scala:37)
[error] java.util.concurrent.FutureTask.run(FutureTask.java:266)
[error] java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
[error] java.util.concurrent.FutureTask.run(FutureTask.java:266)
[error] java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
[error] java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
[error] java.lang.Thread.run(Thread.java:748)
[error]            
[error] java.nio.file.NoSuchFileException: /home/cheeseng/git/scalatest-upstream/scalactic.dotty/src/main/scala/org/scalactic/BooleanMacro.scala
[error] 	at sun.nio.fs.UnixException.translateToIOException(UnixException.java:86)
[error] 	at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102)
[error] 	at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107)
[error] 	at sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:214)
[error] 	at java.nio.file.Files.newByteChannel(Files.java:361)
[error] 	at java.nio.file.Files.newByteChannel(Files.java:407)
[error] 	at java.nio.file.spi.FileSystemProvider.newInputStream(FileSystemProvider.java:384)
[error] 	at java.nio.file.Files.newInputStream(Files.java:152)
[error] 	at dotty.tools.io.File.inputStream(File.scala:51)
[error] 	at dotty.tools.io.PlainFile.input(PlainFile.scala:44)
[error] 	at dotty.tools.io.AbstractFile.toByteArray(AbstractFile.scala:170)
[error] 	at dotty.tools.dotc.util.SourceFile.SourceFile$superArg$1$$anonfun$1(SourceFile.scala:51)
[error] 	at dotty.tools.dotc.util.SourceFile.content(SourceFile.scala:47)
[error] 	at dotty.tools.dotc.util.SourceFile.lineIndices(SourceFile.scala:110)
[error] 	at dotty.tools.dotc.util.SourceFile.offsetToLine(SourceFile.scala:129)
[error] 	at dotty.tools.dotc.util.SourcePosition.line(SourcePosition.scala:25)
[error] 	at xsbt.DelegatingReporter$2.line(DelegatingReporter.java:91)
[error] 	at sbt.internal.server.LanguageServerReporter.$anonfun$toDiagnostics$2(LanguageServerReporter.scala:109)
[error] 	at scala.collection.TraversableLike.$anonfun$flatMap$1(TraversableLike.scala:245)
[error] 	at scala.collection.Iterator.foreach(Iterator.scala:941)
[error] 	at scala.collection.Iterator.foreach$(Iterator.scala:941)
[error] 	at scala.collection.AbstractIterator.foreach(Iterator.scala:1429)
[error] 	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
[error] 	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
[error] 	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
[error] 	at scala.collection.TraversableLike.flatMap(TraversableLike.scala:245)
[error] 	at scala.collection.TraversableLike.flatMap$(TraversableLike.scala:242)
[error] 	at scala.collection.AbstractTraversable.flatMap(Traversable.scala:108)
[error] 	at sbt.internal.server.LanguageServerReporter.toDiagnostics(LanguageServerReporter.scala:107)
[error] 	at sbt.internal.server.LanguageServerReporter.$anonfun$aggregateProblems$1(LanguageServerReporter.scala:97)
[error] 	at sbt.internal.server.LanguageServerReporter.$anonfun$aggregateProblems$1$adapted(LanguageServerReporter.scala:94)
[error] 	at scala.Option.foreach(Option.scala:407)
[error] 	at sbt.internal.server.LanguageServerReporter.aggregateProblems(LanguageServerReporter.scala:94)
[error] 	at sbt.internal.server.LanguageServerReporter.logWarning(LanguageServerReporter.scala:69)
[error] 	at sbt.internal.inc.LoggedReporter.display(LoggedReporter.scala:168)
[error] 	at sbt.internal.inc.LoggedReporter.log(LoggedReporter.scala:142)
[error] 	at sbt.internal.server.LanguageServerReporter.log(LanguageServerReporter.scala:58)
[error] 	at xsbt.DelegatingReporter.doReport(DelegatingReporter.java:135)
[error] 	at dotty.tools.dotc.reporting.Reporter.report(Reporter.scala:272)
[error] 	at dotty.tools.dotc.reporting.Reporting.reportWarning(Reporter.scala:88)
[error] 	at dotty.tools.dotc.core.Contexts$Context.reportWarning(Contexts.scala:75)
[error] 	at dotty.tools.dotc.reporting.Reporting.warning(Reporter.scala:124)
[error] 	at dotty.tools.dotc.core.Contexts$Context.warning(Contexts.scala:75)
[error] 	at dotty.tools.dotc.transform.TypeTestsCasts$.interceptWith$2(TypeTestsCasts.scala:303)
[error] 	at dotty.tools.dotc.transform.TypeTestsCasts$.op$1(TypeTestsCasts.scala:318)
[error] 	at dotty.tools.dotc.transform.TypeTestsCasts$.interceptTypeApply(TypeTestsCasts.scala:319)
[error] 	at dotty.tools.dotc.transform.Erasure$Typer.typedTypeApply(Erasure.scala:526)
[error] 	at dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:2169)
[error] 	at dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2209)
[error] 	at dotty.tools.dotc.typer.ReTyper.typedUnadapted(ReTyper.scala:123)
[error] 	at dotty.tools.dotc.typer.Typer.op$1(Typer.scala:2247)
[error] 	at dotty.tools.dotc.typer.Typer.typed(Typer.scala:2256)
[error] 	at dotty.tools.dotc.typer.Typer.typed(Typer.scala:2259)
[error] 	at dotty.tools.dotc.typer.Typer.typedInlined(Typer.scala:1361)
[error] 	at dotty.tools.dotc.transform.Erasure$Typer.typedInlined(Erasure.scala:595)
[error] 	at dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:2172)
[error] 	at dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2209)
[error] 	at dotty.tools.dotc.typer.ReTyper.typedUnadapted(ReTyper.scala:123)
[error] 	at dotty.tools.dotc.typer.Typer.op$1(Typer.scala:2247)
[error] 	at dotty.tools.dotc.typer.Typer.typed(Typer.scala:2256)
[error] 	at dotty.tools.dotc.typer.Typer.typed(Typer.scala:2259)
[error] 	at dotty.tools.dotc.typer.Typer.typedExpr(Typer.scala:2367)
[error] 	at dotty.tools.dotc.transform.Erasure$Typer.$anonfun$5(Erasure.scala:564)
[error] 	at dotty.tools.dotc.core.Decorators$ListDecorator$.zipWithConserve$extension(Decorators.scala:110)
[error] 	at dotty.tools.dotc.core.Decorators$ListDecorator$.zipWithConserve$extension(Decorators.scala:111)
[error] 	at dotty.tools.dotc.core.Decorators$ListDecorator$.zipWithConserve$extension(Decorators.scala:111)
[error] 	at dotty.tools.dotc.core.Decorators$ListDecorator$.zipWithConserve$extension(Decorators.scala:111)
[error] 	at dotty.tools.dotc.transform.Erasure$Typer.typedApply(Erasure.scala:564)
[error] 	at dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:2151)
[error] 	at dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2209)
[error] 	at dotty.tools.dotc.typer.ReTyper.typedUnadapted(ReTyper.scala:123)
[error] 	at dotty.tools.dotc.typer.Typer.op$1(Typer.scala:2247)
[error] 	at dotty.tools.dotc.typer.Typer.typed(Typer.scala:2256)
[error] 	at dotty.tools.dotc.typer.Typer.op$1(Typer.scala:2243)
[error] 	at dotty.tools.dotc.typer.Typer.typed(Typer.scala:2256)
[error] 	at dotty.tools.dotc.typer.Typer.typed(Typer.scala:2259)
[error] 	at dotty.tools.dotc.typer.Typer.typedInlined(Typer.scala:1361)
[error] 	at dotty.tools.dotc.transform.Erasure$Typer.typedInlined(Erasure.scala:595)
[error] 	at dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:2172)
[error] 	at dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2209)
[error] 	at dotty.tools.dotc.typer.ReTyper.typedUnadapted(ReTyper.scala:123)
[error] 	at dotty.tools.dotc.typer.Typer.op$1(Typer.scala:2247)
[error] 	at dotty.tools.dotc.typer.Typer.typed(Typer.scala:2256)
[error] 	at dotty.tools.dotc.typer.Typer.typed(Typer.scala:2259)
[error] 	at dotty.tools.dotc.typer.Typer.typedInlined(Typer.scala:1361)
[error] 	at dotty.tools.dotc.transform.Erasure$Typer.typedInlined(Erasure.scala:595)
[error] 	at dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:2172)
[error] 	at dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2209)
[error] 	at dotty.tools.dotc.typer.ReTyper.typedUnadapted(ReTyper.scala:123)
[error] 	at dotty.tools.dotc.typer.Typer.op$1(Typer.scala:2247)
[error] 	at dotty.tools.dotc.typer.Typer.typed(Typer.scala:2256)
[error] 	at dotty.tools.dotc.typer.Typer.typed(Typer.scala:2259)
[error] 	at dotty.tools.dotc.typer.Typer.typedExpr(Typer.scala:2367)
[error] 	at dotty.tools.dotc.typer.Typer.typedBlock(Typer.scala:801)
[error] 	at dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:2159)
[error] 	at dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2209)
[error] 	at dotty.tools.dotc.typer.ReTyper.typedUnadapted(ReTyper.scala:123)
[error] 	at dotty.tools.dotc.typer.Typer.op$1(Typer.scala:2247)
[error] 	at dotty.tools.dotc.typer.Typer.typed(Typer.scala:2256)
[error] 	at dotty.tools.dotc.typer.Typer.op$1(Typer.scala:2243)
[error] 	at dotty.tools.dotc.typer.Typer.typed(Typer.scala:2256)
[error] 	at dotty.tools.dotc.typer.Typer.typed(Typer.scala:2259)
[error] 	at dotty.tools.dotc.typer.Typer.typedInlined(Typer.scala:1361)
[error] 	at dotty.tools.dotc.transform.Erasure$Typer.typedInlined(Erasure.scala:595)
[error] 	at dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:2172)
[error] 	at dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2209)
[error] 	at dotty.tools.dotc.typer.ReTyper.typedUnadapted(ReTyper.scala:123)
[error] 	at dotty.tools.dotc.typer.Typer.op$1(Typer.scala:2247)
[error] 	at dotty.tools.dotc.typer.Typer.typed(Typer.scala:2256)
[error] 	at dotty.tools.dotc.typer.Typer.typed(Typer.scala:2259)
[error] 	at dotty.tools.dotc.typer.Typer.typedInlined(Typer.scala:1361)
[error] 	at dotty.tools.dotc.transform.Erasure$Typer.typedInlined(Erasure.scala:595)
[error] 	at dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:2172)
[error] 	at dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2209)
[error] 	at dotty.tools.dotc.typer.ReTyper.typedUnadapted(ReTyper.scala:123)
[error] 	at dotty.tools.dotc.typer.Typer.op$1(Typer.scala:2247)
[error] 	at dotty.tools.dotc.typer.Typer.typed(Typer.scala:2256)
[error] 	at dotty.tools.dotc.typer.Typer.typed(Typer.scala:2259)
[error] 	at dotty.tools.dotc.typer.Typer.typedExpr(Typer.scala:2367)
[error] 	at dotty.tools.dotc.transform.Erasure$Typer.$anonfun$5(Erasure.scala:564)
[error] 	at dotty.tools.dotc.core.Decorators$ListDecorator$.zipWithConserve$extension(Decorators.scala:110)
[error] 	at dotty.tools.dotc.transform.Erasure$Typer.typedApply(Erasure.scala:564)
[error] 	at dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:2151)
[error] 	at dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2209)
[error] 	at dotty.tools.dotc.typer.ReTyper.typedUnadapted(ReTyper.scala:123)
[error] 	at dotty.tools.dotc.typer.Typer.op$1(Typer.scala:2247)
[error] 	at dotty.tools.dotc.typer.Typer.typed(Typer.scala:2256)
[error] 	at dotty.tools.dotc.typer.Typer.typed(Typer.scala:2259)
[error] 	at dotty.tools.dotc.typer.Typer.typedInlined(Typer.scala:1361)
[error] 	at dotty.tools.dotc.transform.Erasure$Typer.typedInlined(Erasure.scala:595)
[error] 	at dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:2172)
[error] 	at dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2209)
[error] 	at dotty.tools.dotc.typer.ReTyper.typedUnadapted(ReTyper.scala:123)
[error] 	at dotty.tools.dotc.typer.Typer.op$1(Typer.scala:2247)
[error] 	at dotty.tools.dotc.typer.Typer.typed(Typer.scala:2256)
[error] 	at dotty.tools.dotc.typer.Typer.op$1(Typer.scala:2243)
[error] 	at dotty.tools.dotc.typer.Typer.typed(Typer.scala:2256)
[error] 	at dotty.tools.dotc.typer.Typer.typed(Typer.scala:2259)
[error] 	at dotty.tools.dotc.transform.Erasure$Typer.typedTyped(Erasure.scala:393)
[error] 	at dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:2156)
[error] 	at dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2209)
[error] 	at dotty.tools.dotc.typer.ReTyper.typedUnadapted(ReTyper.scala:123)
[error] 	at dotty.tools.dotc.typer.Typer.op$1(Typer.scala:2247)
[error] 	at dotty.tools.dotc.typer.Typer.typed(Typer.scala:2256)
[error] 	at dotty.tools.dotc.typer.Typer.op$1(Typer.scala:2243)
[error] 	at dotty.tools.dotc.typer.Typer.typed(Typer.scala:2256)
[error] 	at dotty.tools.dotc.typer.Typer.typed(Typer.scala:2259)
[error] 	at dotty.tools.dotc.typer.Typer.typedInlined(Typer.scala:1361)
[error] 	at dotty.tools.dotc.transform.Erasure$Typer.typedInlined(Erasure.scala:595)
[error] 	at dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:2172)
[error] 	at dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2209)
[error] 	at dotty.tools.dotc.typer.ReTyper.typedUnadapted(ReTyper.scala:123)
[error] 	at dotty.tools.dotc.typer.Typer.op$1(Typer.scala:2247)
[error] 	at dotty.tools.dotc.typer.Typer.typed(Typer.scala:2256)
[error] 	at dotty.tools.dotc.typer.Typer.typed(Typer.scala:2259)
[error] 	at dotty.tools.dotc.typer.Typer.typedExpr(Typer.scala:2367)
[error] 	at dotty.tools.dotc.typer.Typer.typedBlock(Typer.scala:801)
[error] 	at dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:2159)
[error] 	at dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2209)
[error] 	at dotty.tools.dotc.typer.ReTyper.typedUnadapted(ReTyper.scala:123)
[error] 	at dotty.tools.dotc.typer.Typer.op$1(Typer.scala:2247)
[error] 	at dotty.tools.dotc.typer.Typer.typed(Typer.scala:2256)
[error] 	at dotty.tools.dotc.typer.Typer.typed(Typer.scala:2259)
[error] 	at dotty.tools.dotc.typer.Typer.typedExpr(Typer.scala:2367)
[error] 	at dotty.tools.dotc.typer.Typer.typedDefDef(Typer.scala:1679)
[error] 	at dotty.tools.dotc.transform.Erasure$Typer.typedDefDef(Erasure.scala:635)
[error] 	at dotty.tools.dotc.typer.Typer.typedNamed$1(Typer.scala:2138)
[error] 	at dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2208)
[error] 	at dotty.tools.dotc.typer.ReTyper.typedUnadapted(ReTyper.scala:123)
[error] 	at dotty.tools.dotc.typer.Typer.op$1(Typer.scala:2247)
[error] 	at dotty.tools.dotc.typer.Typer.typed(Typer.scala:2256)
[error] 	at dotty.tools.dotc.typer.Typer.typed(Typer.scala:2259)
[error] 	at dotty.tools.dotc.typer.Typer.traverse$1(Typer.scala:2281)
[error] 	at dotty.tools.dotc.typer.Typer.typedStats(Typer.scala:2325)
[error] 	at dotty.tools.dotc.transform.Erasure$Typer.typedStats(Erasure.scala:747)
[error] 	at dotty.tools.dotc.typer.Typer.typedBlockStats(Typer.scala:796)
[error] 	at dotty.tools.dotc.typer.Typer.typedBlock(Typer.scala:800)
[error] 	at dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:2159)
[error] 	at dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2209)
[error] 	at dotty.tools.dotc.typer.ReTyper.typedUnadapted(ReTyper.scala:123)
[error] 	at dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2112)
[error] 	at dotty.tools.dotc.transform.Erasure$Typer.typedApply(Erasure.scala:547)
[error] 	at dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:2151)
[error] 	at dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2209)
[error] 	at dotty.tools.dotc.typer.ReTyper.typedUnadapted(ReTyper.scala:123)
[error] 	at dotty.tools.dotc.typer.Typer.op$1(Typer.scala:2247)
[error] 	at dotty.tools.dotc.typer.Typer.typed(Typer.scala:2256)
[error] 	at dotty.tools.dotc.typer.Typer.typed(Typer.scala:2259)
[error] 	at dotty.tools.dotc.typer.Typer.typedExpr(Typer.scala:2367)
[error] 	at dotty.tools.dotc.transform.Erasure$Typer.$anonfun$5(Erasure.scala:564)
[error] 	at dotty.tools.dotc.core.Decorators$ListDecorator$.zipWithConserve$extension(Decorators.scala:110)
[error] 	at dotty.tools.dotc.core.Decorators$ListDecorator$.zipWithConserve$extension(Decorators.scala:111)
[error] 	at dotty.tools.dotc.core.Decorators$ListDecorator$.zipWithConserve$extension(Decorators.scala:111)
[error] 	at dotty.tools.dotc.transform.Erasure$Typer.typedApply(Erasure.scala:564)
[error] 	at dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:2151)
[error] 	at dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2209)
[error] 	at dotty.tools.dotc.typer.ReTyper.typedUnadapted(ReTyper.scala:123)
[error] 	at dotty.tools.dotc.typer.Typer.op$1(Typer.scala:2247)
[error] 	at dotty.tools.dotc.typer.Typer.typed(Typer.scala:2256)
[error] 	at dotty.tools.dotc.typer.Typer.typed(Typer.scala:2259)
[error] 	at dotty.tools.dotc.typer.Typer.typedExpr(Typer.scala:2367)
[error] 	at dotty.tools.dotc.transform.Erasure$Typer.typedApply(Erasure.scala:548)
[error] 	at dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:2151)
[error] 	at dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2209)
[error] 	at dotty.tools.dotc.typer.ReTyper.typedUnadapted(ReTyper.scala:123)
[error] 	at dotty.tools.dotc.typer.Typer.op$1(Typer.scala:2247)
[error] 	at dotty.tools.dotc.typer.Typer.typed(Typer.scala:2256)
[error] 	at dotty.tools.dotc.typer.Typer.typed(Typer.scala:2259)
[error] 	at dotty.tools.dotc.typer.Typer.typedExpr(Typer.scala:2367)
[error] 	at dotty.tools.dotc.transform.Erasure$Typer.typedApply(Erasure.scala:548)
[error] 	at dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:2151)
[error] 	at dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2209)
[error] 	at dotty.tools.dotc.typer.ReTyper.typedUnadapted(ReTyper.scala:123)
[error] 	at dotty.tools.dotc.typer.Typer.op$1(Typer.scala:2247)
[error] 	at dotty.tools.dotc.typer.Typer.typed(Typer.scala:2256)
[error] 	at dotty.tools.dotc.typer.Typer.typed(Typer.scala:2259)
[error] 	at dotty.tools.dotc.typer.Typer.traverse$1(Typer.scala:2303)
[error] 	at dotty.tools.dotc.typer.Typer.typedStats(Typer.scala:2325)
[error] 	at dotty.tools.dotc.transform.Erasure$Typer.typedStats(Erasure.scala:747)
[error] 	at dotty.tools.dotc.typer.Typer.typedClassDef(Typer.scala:1812)
[error] 	at dotty.tools.dotc.typer.Typer.typedNamed$1(Typer.scala:2141)
[error] 	at dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2208)
[error] 	at dotty.tools.dotc.typer.ReTyper.typedUnadapted(ReTyper.scala:123)
[error] 	at dotty.tools.dotc.typer.Typer.op$1(Typer.scala:2247)
[error] 	at dotty.tools.dotc.typer.Typer.typed(Typer.scala:2256)
[error] 	at dotty.tools.dotc.typer.Typer.typed(Typer.scala:2259)
[error] 	at dotty.tools.dotc.typer.Typer.traverse$1(Typer.scala:2281)
[error] 	at dotty.tools.dotc.typer.Typer.typedStats(Typer.scala:2325)
[error] 	at dotty.tools.dotc.transform.Erasure$Typer.typedStats(Erasure.scala:747)
[error] 	at dotty.tools.dotc.typer.Typer.typedPackageDef(Typer.scala:1938)
[error] 	at dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:2182)
[error] 	at dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2209)
[error] 	at dotty.tools.dotc.typer.ReTyper.typedUnadapted(ReTyper.scala:123)
[error] 	at dotty.tools.dotc.typer.Typer.op$1(Typer.scala:2247)
[error] 	at dotty.tools.dotc.typer.Typer.typed(Typer.scala:2256)
[error] 	at dotty.tools.dotc.typer.Typer.typed(Typer.scala:2259)
[error] 	at dotty.tools.dotc.typer.Typer.typedExpr(Typer.scala:2367)
[error] 	at dotty.tools.dotc.transform.Erasure.run(Erasure.scala:100)
[error] 	at dotty.tools.dotc.core.Phases$Phase.runOn$$anonfun$1(Phases.scala:315)
[error] 	at scala.collection.immutable.List.map(List.scala:219)
[error] 	at dotty.tools.dotc.core.Phases$Phase.runOn(Phases.scala:316)
[error] 	at dotty.tools.dotc.Run.runPhases$4$$anonfun$4(Run.scala:167)
[error] 	at dotty.runtime.function.JProcedure1.apply(JProcedure1.java:15)
[error] 	at dotty.runtime.function.JProcedure1.apply(JProcedure1.java:10)
[error] 	at scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1323)
[error] 	at dotty.tools.dotc.Run.runPhases$5(Run.scala:177)
[error] 	at dotty.tools.dotc.Run.compileUnits$$anonfun$1(Run.scala:185)
[error] 	at dotty.runtime.function.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:12)
[error] 	at dotty.tools.dotc.util.Stats$.maybeMonitored(Stats.scala:64)
[error] 	at dotty.tools.dotc.Run.compileUnits(Run.scala:192)
[error] 	at dotty.tools.dotc.Run.compileSources(Run.scala:129)
[error] 	at dotty.tools.dotc.Run.compile(Run.scala:112)
[error] 	at dotty.tools.dotc.Driver.doCompile(Driver.scala:36)
[error] 	at dotty.tools.dotc.Driver.process(Driver.scala:189)
[error] 	at dotty.tools.dotc.Main.process(Main.scala)
[error] 	at xsbt.CachedCompilerImpl.run(CachedCompilerImpl.java:69)
[error] 	at xsbt.CompilerInterface.run(CompilerInterface.java:41)
[error] 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[error] 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
[error] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[error] 	at java.lang.reflect.Method.invoke(Method.java:498)
[error] 	at sbt.internal.inc.AnalyzingCompiler.call(AnalyzingCompiler.scala:248)
[error] 	at sbt.internal.inc.AnalyzingCompiler.compile(AnalyzingCompiler.scala:122)
[error] 	at sbt.internal.inc.AnalyzingCompiler.compile(AnalyzingCompiler.scala:95)
[error] 	at sbt.internal.inc.MixedAnalyzingCompiler.$anonfun$compile$4(MixedAnalyzingCompiler.scala:91)
[error] 	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
[error] 	at sbt.internal.inc.MixedAnalyzingCompiler.timed(MixedAnalyzingCompiler.scala:186)
[error] 	at sbt.internal.inc.MixedAnalyzingCompiler.$anonfun$compile$3(MixedAnalyzingCompiler.scala:82)
[error] 	at sbt.internal.inc.MixedAnalyzingCompiler.$anonfun$compile$3$adapted(MixedAnalyzingCompiler.scala:77)
[error] 	at sbt.internal.inc.JarUtils$.withPreviousJar(JarUtils.scala:215)
[error] 	at sbt.internal.inc.MixedAnalyzingCompiler.compileScala$1(MixedAnalyzingCompiler.scala:77)
[error] 	at sbt.internal.inc.MixedAnalyzingCompiler.compile(MixedAnalyzingCompiler.scala:146)
[error] 	at sbt.internal.inc.IncrementalCompilerImpl.$anonfun$compileInternal$1(IncrementalCompilerImpl.scala:343)
[error] 	at sbt.internal.inc.IncrementalCompilerImpl.$anonfun$compileInternal$1$adapted(IncrementalCompilerImpl.scala:343)
[error] 	at sbt.internal.inc.Incremental$.doCompile(Incremental.scala:120)
[error] 	at sbt.internal.inc.Incremental$.$anonfun$compile$4(Incremental.scala:100)
[error] 	at sbt.internal.inc.IncrementalCommon.recompileClasses(IncrementalCommon.scala:180)
[error] 	at sbt.internal.inc.IncrementalCommon.cycle(IncrementalCommon.scala:98)
[error] 	at sbt.internal.inc.Incremental$.$anonfun$compile$3(Incremental.scala:102)
[error] 	at sbt.internal.inc.Incremental$.manageClassfiles(Incremental.scala:155)
[error] 	at sbt.internal.inc.Incremental$.compile(Incremental.scala:92)
[error] 	at sbt.internal.inc.IncrementalCompile$.apply(Compile.scala:75)
[error] 	at sbt.internal.inc.IncrementalCompilerImpl.compileInternal(IncrementalCompilerImpl.scala:348)
[error] 	at sbt.internal.inc.IncrementalCompilerImpl.$anonfun$compileIncrementally$1(IncrementalCompilerImpl.scala:301)
[error] 	at sbt.internal.inc.IncrementalCompilerImpl.handleCompilationError(IncrementalCompilerImpl.scala:168)
[error] 	at sbt.internal.inc.IncrementalCompilerImpl.compileIncrementally(IncrementalCompilerImpl.scala:248)
[error] 	at sbt.internal.inc.IncrementalCompilerImpl.compile(IncrementalCompilerImpl.scala:74)
[error] 	at sbt.Defaults$.compileIncrementalTaskImpl(Defaults.scala:1762)
[error] 	at sbt.Defaults$.$anonfun$compileIncrementalTask$1(Defaults.scala:1735)
[error] 	at scala.Function1.$anonfun$compose$1(Function1.scala:49)
[error] 	at sbt.internal.util.$tilde$greater.$anonfun$$u2219$1(TypeFunctions.scala:62)
[error] 	at sbt.std.Transform$$anon$4.work(Transform.scala:67)
[error] 	at sbt.Execute.$anonfun$submit$2(Execute.scala:281)
[error] 	at sbt.internal.util.ErrorHandling$.wideConvert(ErrorHandling.scala:19)
[error] 	at sbt.Execute.work(Execute.scala:290)
[error] 	at sbt.Execute.$anonfun$submit$1(Execute.scala:281)
[error] 	at sbt.ConcurrentRestrictions$$anon$4.$anonfun$submitValid$1(ConcurrentRestrictions.scala:178)
[error] 	at sbt.CompletionService$$anon$2.call(CompletionService.scala:37)
[error] 	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
[error] 	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
[error] 	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
[error] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
[error] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
[error] 	at java.lang.Thread.run(Thread.java:748)
[error] (Test / compileIncremental) java.nio.file.NoSuchFileException: /home/cheeseng/git/scalatest-upstream/scalactic.dotty/src/main/scala/org/scalactic/BooleanMacro.scala
[error] Total time: 7 s, completed 27-Mar-2020 11:46:05
